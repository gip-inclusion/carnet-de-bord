#!/usr/bin/env python3

import pathlib
import re
import sys


def check_hasura_docker_version(filepath, expected_version):
    # image: hasura/graphql-engine:v2.15.2-ce.cli-migrations-v3
    image_pattern = re.compile(
        r"""
        (?P<prefix>
            ^\s*                    # Tolerate leading whitespaces
            image:\s*               # Docker compose image spec
            hasura/graphql-engine   # Image name
            :                        # Version delimiter
            v)
        (?P<version>[0-9]+\.[0-9]+\.[0-9]+?)
        """,
        re.VERBOSE | re.MULTILINE,
    )

    path = pathlib.Path(filepath)

    contents = path.read_text()
    image_pattern.search(contents)

    (patched, subs_made) = image_pattern.subn(
        rf"\g<prefix>{expected_version}", contents
    )

    if subs_made != 1:
        sys.exit(f"Could not read hasura docker image version from {filepath}")

    if patched != contents:
        path.write_text(patched)
        return False

    return True


def main():
    hasura_fp = "hasura/.hasura_version"
    hasura_version = pathlib.Path(hasura_fp).read_text().strip()
    print(f"--> Version from .hasura_version file is {hasura_version}")

    errors = []
    for file in ["docker-compose.yaml", "docker-compose-test.yaml"]:
        ok = check_hasura_docker_version(file, hasura_version)
        print(f"--> Version in {file} matches? {'Yes' if ok else 'No'}")
        if not ok:
            errors.append(
                f"--> Error: Version in {file} mismatches version in {hasura_fp}.\n"
                f"    The file was modified to match the correct version."
            )

    if errors:
        sys.exit("\n".join(errors))


if __name__ == "__main__":
    main()
