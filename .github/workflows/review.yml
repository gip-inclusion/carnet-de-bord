name: Review

on:
  push:
    branches-ignore:
      - 'master'
    tags-ignore:
      - v*

concurrency:
  cancel-in-progress: true
  group: review-${{ github.ref }}

env:
  HASURA_VERSION: v2.8.3

jobs:
  ##############################################################################
  ## BUILD AND REGISTER BACKEND IMAGE
  ##############################################################################
  register-backend:
    name: Build & Register backend
    runs-on: ubuntu-latest
    steps:
      - name: Use autodevops build and register
        uses: SocialGouv/actions/autodevops-build-register@v1
        with:
          dockerfile: backend/Dockerfile
          dockercontext: backend
          imageName: carnet-de-bord/backend
          token: ${{ secrets.GITHUB_TOKEN }}

  ##############################################################################
  ## BUILD AND REGISTER APP IMAGE
  ##############################################################################
  register-app:
    name: Build & Register application
    runs-on: ubuntu-latest
    steps:
      - name: Use autodevops build and register
        uses: SocialGouv/actions/autodevops-build-register@v1
        with:
          imageName: carnet-de-bord/app
          token: ${{ secrets.GITHUB_TOKEN }}
          dockerbuildargs: |
            VITE_CRISP_WEBSITE_ID=2f9fd96d-44a0-4588-8f7e-a06a5a531c6f
            VITE_MATOMO_SITE_ID=53
            VITE_MATOMO_URL=https://matomo.fabrique.social.gouv.fr

  ##############################################################################
  ## BUILD AND REGISTER HASURA IMAGE
  ##############################################################################
  register-hasura:
    name: Build & Register Hasura
    runs-on: ubuntu-latest
    steps:
      - name: Use autodevops build and register
        uses: SocialGouv/actions/autodevops-build-register@v1
        with:
          dockerfile: hasura/Dockerfile
          token: ${{ secrets.GITHUB_TOKEN }}
          imageName: carnet-de-bord/hasura

  ##############################################################################
  ## DEPLOY BACKEND & FRONT-END
  ##############################################################################
  deploy:
    name: Deploy review branch
    runs-on: ubuntu-latest
    needs: [register-app, register-hasura, register-backend]
    steps:
      - name: Use kube-workflow deployment
        uses: SocialGouv/kube-workflow@v1
        with:
          environment: dev
          token: ${{ secrets.GITHUB_TOKEN }}
          kubeconfig: ${{ secrets.KUBECONFIG }}
          rancherProjectId: ${{ secrets.RANCHER_PROJECT_ID }}
          rancherProjectName: ${{ secrets.RANCHER_PROJECT_NAME }}

  pytest:
    name: run pytest tests
    runs-on: ubuntu-latest
    needs: [deploy]
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_DB: carnet_de_bord
          POSTGRES_USER: cdb
          POSTGRES_PASSWORD: test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
      hasura:
        image: ghcr.io/socialgouv/carnet-de-bord/hasura:sha-${{ github.sha }}
        env:
          HASURA_GRAPHQL_DATABASE_URL: postgres://cdb:test@postgres:5432/carnet_de_bord
          HASURA_GRAPHQL_JWT_SECRET: '{"type":"HS256","key":"3EK6FD+o0+c7tzBNVfjpMkNDi2yARAAKzQlk8O2IKoxQu4nF7EdAh8s3TwpHwrdWT6R"}'
          HASURA_GRAPHQL_ADMIN_SECRET: admin_secret
        ports:
          - 8080:8080
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Run image
        uses: abatilo/actions-poetry@v2.1.6
        with:
          poetry-version: 1.1.13

      - name: Install dependencies
        working-directory: ./backend
        run: poetry install

      - name: Hasura metadata apply
        uses: browniefed/hasura-runner@master
        with:
          args: metadata apply
        env:
          PATH_TO_HASURA_PROJECT_ROOT: ./hasura
          HASURA_ENDPOINT: http://hasura:8080
          HASURA_ADMIN_SECRET: admin_secret

      - name: Hasura migrate apply
        uses: browniefed/hasura-runner@master
        with:
          args: migrate apply --database-name carnet_de_bord
        env:
          PATH_TO_HASURA_PROJECT_ROOT: ./hasura
          HASURA_ENDPOINT: http://hasura:8080
          HASURA_ADMIN_SECRET: admin_secret

      - name: Hasura metadata reload
        uses: browniefed/hasura-runner@master
        with:
          args: metadata reload
        env:
          PATH_TO_HASURA_PROJECT_ROOT: ./hasura
          HASURA_ENDPOINT: http://hasura:8080
          HASURA_ADMIN_SECRET: admin_secret

      - name: Hasura seed apply
        uses: browniefed/hasura-runner@master
        with:
          args: seeds apply --database-name carnet_de_bord
        env:
          PATH_TO_HASURA_PROJECT_ROOT: ./hasura
          HASURA_ENDPOINT: http://hasura:8080
          HASURA_ADMIN_SECRET: admin_secret

      - name: Download k8s manifests
        uses: actions/download-artifact@v3
        with:
          name: manifests-dev.yaml

      - name: Get deployment url
        uses: mikefarah/yq@v4.27.3
        id: app
        with:
          cmd: echo $(cat manifests.yaml | yq e '.spec.rules[]?.host' - | head -n 3 | tail -n 1)
      - name: Get deployment url
        uses: mikefarah/yq@v4.27.3
        id: backend
        with:
          cmd: echo $(cat manifests.yaml | yq e '.spec.rules[]?.host' - | head -n 1 | tail -n 1)
      - name: Get smtp url
        uses: mikefarah/yq@v4.27.3
        id: smtp
        with:
          cmd: echo $(cat manifests.yaml | yq e '.spec.rules[]?.host' - | head -n 7 | tail -n 1)
      - name: Run pytest
        working-directory: ./backend
        env:
          HASURA_GRAPHQL_JWT_SECRET: '{"type":"HS256","key":"3EK6FD+o0+c7tzBNVfjpMkNDi2yARAAKzQlk8O2IKoxQu4nF7EdAh8s3TwpHwrdWT6R"}'
          DATABASE_URL: postgres://cdb:test@localhost:5432/carnet_de_bord
          APP_URL: http://app
          SMTP_HOST: smtp-host
          SMTP_PORT: 1025
        run: |
          poetry run pytest

  ##############################################################################
  ## End To End Tests running on all branches
  ##############################################################################
  e2e:
    name: run CodeceptJS tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Yarn cache setup
        uses: c-hive/gha-yarn-cache@v2
      - name: Install dependencies
        run: |
          yarn install --prefer-offline --frozen-lockfile
          yarn --cwd e2e install --prefer-offline --frozen-lockfile

      - name: Install Hasura cli
        run: |
          BIN_DIR="$HOME/.hasura/bin"
          mkdir -p "$BIN_DIR"
          curl -Ss -L -o "$BIN_DIR/hasura" https://github.com/hasura/graphql-engine/releases/download/$HASURA_VERSION/cli-hasura-linux-amd64
          chmod +x "$BIN_DIR/hasura"
          echo "$BIN_DIR" >> "$GITHUB_PATH"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Setup Poetry
        uses: abatilo/actions-poetry@v2.1.5
        with:
          poetry-version: 1.1.13
      - name: Install Python dependencies
        working-directory: ./backend
        run: poetry install

      - name: Run test e2e
        run: |
          cp .env.test.sample .env.test
          ./scripts/launch_tests.sh e2e

      - name: Copy artifact
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: screenshot
          path: e2e/output

  ##############################################################################
  ## Functional Tests (endpoints & hasura) running on all branches
  ##############################################################################
  functional_tests:
    name: run functional tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Yarn cache setup
        uses: c-hive/gha-yarn-cache@v2
      - name: Install dependencies
        run: |
          yarn install --prefer-offline --frozen-lockfile

      - name: Install Hasura cli
        run: |
          BIN_DIR="$HOME/.hasura/bin"
          mkdir -p "$BIN_DIR"
          curl -Ss -L -o "$BIN_DIR/hasura" https://github.com/hasura/graphql-engine/releases/download/$HASURA_VERSION/cli-hasura-linux-amd64
          chmod +x "$BIN_DIR/hasura"
          echo "$BIN_DIR" >> "$GITHUB_PATH"

      - name: Run functional tests
        run: |
          cp .env.test.sample .env.test
          ./scripts/launch_tests.sh js
