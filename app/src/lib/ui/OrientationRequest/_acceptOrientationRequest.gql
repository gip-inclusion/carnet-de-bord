mutation AcceptOrientationRequest($id: uuid!, $orientationType: orientation_type_enum, $notebookId: uuid!, $beneficiaryId: uuid!, $structureId: uuid!, $professionalAccountId: uuid, $withProfessionalAccountId: Boolean = false) {
  insert_beneficiary_info_one(object: {beneficiaryId: $beneficiaryId, orientation: $orientationType}, on_conflict: {constraint: beneficiary_info_pkey, update_columns: [orientation]}) {
    beneficiaryId
  }
  update_notebook_member(where: {notebookId: {_eq: $notebookId}, memberType: {_eq: "referent"}}, _set: {memberType: "former_referent"}) {
    affected_rows
  }
  update_beneficiary_structure(where: {beneficiaryId: {_eq: $beneficiaryId}}, _set: {status: "outdated"}) {
    affected_rows
  }
  createDoneBeneficiaryStructure: insert_beneficiary_structure_one(object: {beneficiaryId: $beneficiaryId, structureId: $structureId, status: "done"}) @include(if: $withProfessionalAccountId) {
    id
  }
  createPendingBeneficiaryStructure: insert_beneficiary_structure_one(object: {beneficiaryId: $beneficiaryId, structureId: $structureId, status: "pending"}) @skip(if: $withProfessionalAccountId) {
    id
  }
  insert_notebook_member_one(object: {notebookId: $notebookId, memberType: "referent", accountId: $professionalAccountId}) @include(if: $withProfessionalAccountId) {
    id
  }
  update_orientation_request_by_pk(pk_columns: {id: $id}, _set: {decidedAt: now, status: "accepted", decidedOrientationTypeId: $orientationType}) {
    id
  }
}
