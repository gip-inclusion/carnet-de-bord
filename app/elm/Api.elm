module Api exposing (Citext(..), Date(..), Float8(..), Jsonb(..), Mutation, Option, Query, Timestamp(..), Timestamptz(..), Uuid(..), absent, batch, citext, date, float8, jsonb, map, map2, mutation, mutationTask, null, present, query, queryTask, timestamp, timestamptz, uuid)

{-|
This is a file generated by `elm-gql` when you ran `elm-gql init`!

It's yours now to do whatever you want with.

This file does include decoders and encoders for all the Scalars for your GQL endpoint.  You'll need to make sure they are implemented correctly.

## Queries

@docs queryTask, query, Query

## Mutations

@docs mutationTask, mutation, Mutation

## Optional Inputs

@docs Option, present, absent, null

## Batching and Mapping

@docs map2, map, batch

## Scalar Decoders and Encoders

@docs uuid, Uuid, timestamptz, Timestamptz, timestamp, Timestamp, jsonb, Jsonb, float8, Float8, date, Date, citext, Citext
-}


import GraphQL.Engine
import Http
import Json.Decode
import Json.Encode
import Task


type alias Query data =
    GraphQL.Engine.Selection GraphQL.Engine.Query data


type alias Mutation data =
    GraphQL.Engine.Selection GraphQL.Engine.Mutation data


type alias Selection source data =
    GraphQL.Engine.Selection source data


query :
    Query data
    -> { headers : List Http.Header
    , url : String
    , timeout : Maybe Float
    , tracker : Maybe String
    }
    -> Cmd (Result GraphQL.Engine.Error data)
query sel options =
    GraphQL.Engine.query sel options


mutation :
    Mutation data
    -> { headers : List Http.Header
    , url : String
    , timeout : Maybe Float
    , tracker : Maybe String
    }
    -> Cmd (Result GraphQL.Engine.Error data)
mutation sel options =
    GraphQL.Engine.mutation sel options


queryTask :
    Query data
    -> { headers : List Http.Header, url : String, timeout : Maybe Float }
    -> Task.Task GraphQL.Engine.Error data
queryTask sel options =
    GraphQL.Engine.queryTask sel options


mutationTask :
    Mutation data
    -> { headers : List Http.Header, url : String, timeout : Maybe Float }
    -> Task.Task GraphQL.Engine.Error data
mutationTask sel options =
    GraphQL.Engine.mutationTask sel options


null : Option value
null =
    GraphQL.Engine.Null


absent : Option value
absent =
    GraphQL.Engine.Absent


present : input -> Option input
present input =
    GraphQL.Engine.Present input


type alias Option input =
    GraphQL.Engine.Option input


batch : List (Selection source data) -> Selection source (List data)
batch =
    GraphQL.Engine.batch


map : (a -> b) -> Selection source a -> Selection source b
map =
    GraphQL.Engine.map


map2 :
    (a -> b -> c)
    -> Selection source a
    -> Selection source b
    -> Selection source c
map2 =
    GraphQL.Engine.map2


type alias Codec scalar =
    { encode : scalar -> Json.Encode.Value
    , decoder : Json.Decode.Decoder scalar
    }


type Citext
    = Citext String


citext : Codec Citext
citext =
    { encode =
        \val ->
            case val of
                Citext str ->
                    Json.Encode.string str
    , decoder = Json.Decode.map Citext Json.Decode.string
    }


type Date
    = Date String


date : Codec Date
date =
    { encode =
        \val ->
            case val of
                Date str ->
                    Json.Encode.string str
    , decoder = Json.Decode.map Date Json.Decode.string
    }


type Float8
    = Float8 String


float8 : Codec Float8
float8 =
    { encode =
        \val ->
            case val of
                Float8 str ->
                    Json.Encode.string str
    , decoder = Json.Decode.map Float8 Json.Decode.string
    }


type Jsonb
    = Jsonb String


jsonb : Codec Jsonb
jsonb =
    { encode =
        \val ->
            case val of
                Jsonb str ->
                    Json.Encode.string str
    , decoder = Json.Decode.map Jsonb Json.Decode.string
    }


type Timestamp
    = Timestamp String


timestamp : Codec Timestamp
timestamp =
    { encode =
        \val ->
            case val of
                Timestamp str ->
                    Json.Encode.string str
    , decoder = Json.Decode.map Timestamp Json.Decode.string
    }


type Timestamptz
    = Timestamptz String


timestamptz : Codec Timestamptz
timestamptz =
    { encode =
        \val ->
            case val of
                Timestamptz str ->
                    Json.Encode.string str
    , decoder = Json.Decode.map Timestamptz Json.Decode.string
    }


type Uuid
    = Uuid String


uuid : Codec Uuid
uuid =
    { encode =
        \val ->
            case val of
                Uuid str ->
                    Json.Encode.string str
    , decoder = Json.Decode.map Uuid Json.Decode.string
    }
