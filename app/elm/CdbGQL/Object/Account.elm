-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module CdbGQL.Object.Account exposing (..)

import CdbGQL.Enum.Notebook_action_select_column
import CdbGQL.Enum.Notebook_event_select_column
import CdbGQL.Enum.Notebook_focus_select_column
import CdbGQL.Enum.Notebook_member_select_column
import CdbGQL.Enum.Notebook_target_select_column
import CdbGQL.Enum.Role_enum
import CdbGQL.InputObject
import CdbGQL.Interface
import CdbGQL.Object
import CdbGQL.Scalar
import CdbGQL.ScalarCodecs
import CdbGQL.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


accessKey : SelectionSet (Maybe String) CdbGQL.Object.Account
accessKey =
    Object.selectionForField "(Maybe String)" "accessKey" [] (Decode.string |> Decode.nullable)


accessKeyDate : SelectionSet (Maybe CdbGQL.ScalarCodecs.Timestamptz) CdbGQL.Object.Account
accessKeyDate =
    Object.selectionForField "(Maybe ScalarCodecs.Timestamptz)" "accessKeyDate" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecTimestamptz |> .decoder |> Decode.nullable)


{-| An object relationship
-}
admin :
    SelectionSet decodesTo CdbGQL.Object.Admin_cdb
    -> SelectionSet (Maybe decodesTo) CdbGQL.Object.Account
admin object____ =
    Object.selectionForCompositeField "admin" [] object____ (Basics.identity >> Decode.nullable)


adminId : SelectionSet (Maybe CdbGQL.ScalarCodecs.Uuid) CdbGQL.Object.Account
adminId =
    Object.selectionForField "(Maybe ScalarCodecs.Uuid)" "adminId" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecUuid |> .decoder |> Decode.nullable)


adminStructureId : SelectionSet (Maybe CdbGQL.ScalarCodecs.Uuid) CdbGQL.Object.Account
adminStructureId =
    Object.selectionForField "(Maybe ScalarCodecs.Uuid)" "adminStructureId" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecUuid |> .decoder |> Decode.nullable)


{-| An object relationship
-}
admin_structure :
    SelectionSet decodesTo CdbGQL.Object.Admin_structure
    -> SelectionSet (Maybe decodesTo) CdbGQL.Object.Account
admin_structure object____ =
    Object.selectionForCompositeField "admin_structure" [] object____ (Basics.identity >> Decode.nullable)


{-| An object relationship
-}
beneficiary :
    SelectionSet decodesTo CdbGQL.Object.Beneficiary
    -> SelectionSet (Maybe decodesTo) CdbGQL.Object.Account
beneficiary object____ =
    Object.selectionForCompositeField "beneficiary" [] object____ (Basics.identity >> Decode.nullable)


beneficiaryId : SelectionSet (Maybe CdbGQL.ScalarCodecs.Uuid) CdbGQL.Object.Account
beneficiaryId =
    Object.selectionForField "(Maybe ScalarCodecs.Uuid)" "beneficiaryId" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecUuid |> .decoder |> Decode.nullable)


confirmed : SelectionSet Bool CdbGQL.Object.Account
confirmed =
    Object.selectionForField "Bool" "confirmed" [] Decode.bool


createdAt : SelectionSet CdbGQL.ScalarCodecs.Timestamptz CdbGQL.Object.Account
createdAt =
    Object.selectionForField "ScalarCodecs.Timestamptz" "createdAt" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecTimestamptz |> .decoder)


deletedAt : SelectionSet (Maybe CdbGQL.ScalarCodecs.Timestamptz) CdbGQL.Object.Account
deletedAt =
    Object.selectionForField "(Maybe ScalarCodecs.Timestamptz)" "deletedAt" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecTimestamptz |> .decoder |> Decode.nullable)


id : SelectionSet CdbGQL.ScalarCodecs.Uuid CdbGQL.Object.Account
id =
    Object.selectionForField "ScalarCodecs.Uuid" "id" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecUuid |> .decoder)


lastLogin : SelectionSet (Maybe CdbGQL.ScalarCodecs.Timestamptz) CdbGQL.Object.Account
lastLogin =
    Object.selectionForField "(Maybe ScalarCodecs.Timestamptz)" "lastLogin" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecTimestamptz |> .decoder |> Decode.nullable)


{-| An object relationship
-}
manager :
    SelectionSet decodesTo CdbGQL.Object.Manager
    -> SelectionSet (Maybe decodesTo) CdbGQL.Object.Account
manager object____ =
    Object.selectionForCompositeField "manager" [] object____ (Basics.identity >> Decode.nullable)


managerId : SelectionSet (Maybe CdbGQL.ScalarCodecs.Uuid) CdbGQL.Object.Account
managerId =
    Object.selectionForField "(Maybe ScalarCodecs.Uuid)" "managerId" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecUuid |> .decoder |> Decode.nullable)


type alias NotebookActionsCreatedOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Notebook_action_select_column.Notebook_action_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Notebook_action_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Notebook_action_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
notebookActionsCreated :
    (NotebookActionsCreatedOptionalArguments -> NotebookActionsCreatedOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Notebook_action
    -> SelectionSet (List decodesTo) CdbGQL.Object.Account
notebookActionsCreated fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Notebook_action_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeNotebook_action_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeNotebook_action_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "notebookActionsCreated" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias NotebookActionsCreatedAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Notebook_action_select_column.Notebook_action_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Notebook_action_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Notebook_action_bool_exp
    }


{-| An aggregate relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
notebookActionsCreated_aggregate :
    (NotebookActionsCreatedAggregateOptionalArguments -> NotebookActionsCreatedAggregateOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Notebook_action_aggregate
    -> SelectionSet decodesTo CdbGQL.Object.Account
notebookActionsCreated_aggregate fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Notebook_action_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeNotebook_action_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeNotebook_action_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "notebookActionsCreated_aggregate" optionalArgs____ object____ Basics.identity


type alias NotebookEventsCreatedOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Notebook_event_select_column.Notebook_event_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Notebook_event_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Notebook_event_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
notebookEventsCreated :
    (NotebookEventsCreatedOptionalArguments -> NotebookEventsCreatedOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Notebook_event
    -> SelectionSet (List decodesTo) CdbGQL.Object.Account
notebookEventsCreated fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Notebook_event_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeNotebook_event_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeNotebook_event_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "notebookEventsCreated" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias NotebookEventsCreatedAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Notebook_event_select_column.Notebook_event_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Notebook_event_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Notebook_event_bool_exp
    }


{-| An aggregate relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
notebookEventsCreated_aggregate :
    (NotebookEventsCreatedAggregateOptionalArguments -> NotebookEventsCreatedAggregateOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Notebook_event_aggregate
    -> SelectionSet decodesTo CdbGQL.Object.Account
notebookEventsCreated_aggregate fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Notebook_event_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeNotebook_event_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeNotebook_event_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "notebookEventsCreated_aggregate" optionalArgs____ object____ Basics.identity


type alias NotebookFocusesCreatedOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Notebook_focus_select_column.Notebook_focus_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Notebook_focus_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Notebook_focus_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
notebookFocusesCreated :
    (NotebookFocusesCreatedOptionalArguments -> NotebookFocusesCreatedOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Notebook_focus
    -> SelectionSet (List decodesTo) CdbGQL.Object.Account
notebookFocusesCreated fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Notebook_focus_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeNotebook_focus_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeNotebook_focus_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "notebookFocusesCreated" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias NotebookFocusesCreatedAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Notebook_focus_select_column.Notebook_focus_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Notebook_focus_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Notebook_focus_bool_exp
    }


{-| An aggregate relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
notebookFocusesCreated_aggregate :
    (NotebookFocusesCreatedAggregateOptionalArguments -> NotebookFocusesCreatedAggregateOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Notebook_focus_aggregate
    -> SelectionSet decodesTo CdbGQL.Object.Account
notebookFocusesCreated_aggregate fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Notebook_focus_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeNotebook_focus_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeNotebook_focus_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "notebookFocusesCreated_aggregate" optionalArgs____ object____ Basics.identity


type alias NotebookTargetsCreatedOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Notebook_target_select_column.Notebook_target_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Notebook_target_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Notebook_target_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
notebookTargetsCreated :
    (NotebookTargetsCreatedOptionalArguments -> NotebookTargetsCreatedOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Notebook_target
    -> SelectionSet (List decodesTo) CdbGQL.Object.Account
notebookTargetsCreated fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Notebook_target_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeNotebook_target_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeNotebook_target_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "notebookTargetsCreated" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias NotebookTargetsCreatedAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Notebook_target_select_column.Notebook_target_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Notebook_target_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Notebook_target_bool_exp
    }


{-| An aggregate relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
notebookTargetsCreated_aggregate :
    (NotebookTargetsCreatedAggregateOptionalArguments -> NotebookTargetsCreatedAggregateOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Notebook_target_aggregate
    -> SelectionSet decodesTo CdbGQL.Object.Account
notebookTargetsCreated_aggregate fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Notebook_target_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeNotebook_target_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeNotebook_target_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "notebookTargetsCreated_aggregate" optionalArgs____ object____ Basics.identity


type alias NotebooksCreatedOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Notebook_member_select_column.Notebook_member_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Notebook_member_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Notebook_member_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
notebooksCreated :
    (NotebooksCreatedOptionalArguments -> NotebooksCreatedOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Notebook_member
    -> SelectionSet (List decodesTo) CdbGQL.Object.Account
notebooksCreated fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Notebook_member_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeNotebook_member_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeNotebook_member_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "notebooksCreated" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias NotebooksCreatedAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Notebook_member_select_column.Notebook_member_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Notebook_member_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Notebook_member_bool_exp
    }


{-| An aggregate relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
notebooksCreated_aggregate :
    (NotebooksCreatedAggregateOptionalArguments -> NotebooksCreatedAggregateOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Notebook_member_aggregate
    -> SelectionSet decodesTo CdbGQL.Object.Account
notebooksCreated_aggregate fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Notebook_member_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeNotebook_member_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeNotebook_member_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "notebooksCreated_aggregate" optionalArgs____ object____ Basics.identity


type alias NotebooksWhereMemberOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Notebook_member_select_column.Notebook_member_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Notebook_member_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Notebook_member_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
notebooksWhereMember :
    (NotebooksWhereMemberOptionalArguments -> NotebooksWhereMemberOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Notebook_member
    -> SelectionSet (List decodesTo) CdbGQL.Object.Account
notebooksWhereMember fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Notebook_member_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeNotebook_member_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeNotebook_member_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "notebooksWhereMember" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias NotebooksWhereMemberAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Notebook_member_select_column.Notebook_member_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Notebook_member_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Notebook_member_bool_exp
    }


{-| An aggregate relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
notebooksWhereMember_aggregate :
    (NotebooksWhereMemberAggregateOptionalArguments -> NotebooksWhereMemberAggregateOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Notebook_member_aggregate
    -> SelectionSet decodesTo CdbGQL.Object.Account
notebooksWhereMember_aggregate fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Notebook_member_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeNotebook_member_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeNotebook_member_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "notebooksWhereMember_aggregate" optionalArgs____ object____ Basics.identity


onboardingDone : SelectionSet (Maybe Bool) CdbGQL.Object.Account
onboardingDone =
    Object.selectionForField "(Maybe Bool)" "onboardingDone" [] (Decode.bool |> Decode.nullable)


orientationManagerId : SelectionSet (Maybe CdbGQL.ScalarCodecs.Uuid) CdbGQL.Object.Account
orientationManagerId =
    Object.selectionForField "(Maybe ScalarCodecs.Uuid)" "orientationManagerId" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecUuid |> .decoder |> Decode.nullable)


{-| An object relationship
-}
orientation_manager :
    SelectionSet decodesTo CdbGQL.Object.Orientation_manager
    -> SelectionSet (Maybe decodesTo) CdbGQL.Object.Account
orientation_manager object____ =
    Object.selectionForCompositeField "orientation_manager" [] object____ (Basics.identity >> Decode.nullable)


{-| An object relationship
-}
professional :
    SelectionSet decodesTo CdbGQL.Object.Professional
    -> SelectionSet (Maybe decodesTo) CdbGQL.Object.Account
professional object____ =
    Object.selectionForCompositeField "professional" [] object____ (Basics.identity >> Decode.nullable)


professionalId : SelectionSet (Maybe CdbGQL.ScalarCodecs.Uuid) CdbGQL.Object.Account
professionalId =
    Object.selectionForField "(Maybe ScalarCodecs.Uuid)" "professionalId" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecUuid |> .decoder |> Decode.nullable)


{-| An object relationship
-}
role :
    SelectionSet decodesTo CdbGQL.Object.Role
    -> SelectionSet decodesTo CdbGQL.Object.Account
role object____ =
    Object.selectionForCompositeField "role" [] object____ Basics.identity


type_ : SelectionSet CdbGQL.Enum.Role_enum.Role_enum CdbGQL.Object.Account
type_ =
    Object.selectionForField "Enum.Role_enum.Role_enum" "type" [] CdbGQL.Enum.Role_enum.decoder


updatedAt : SelectionSet CdbGQL.ScalarCodecs.Timestamptz CdbGQL.Object.Account
updatedAt =
    Object.selectionForField "ScalarCodecs.Timestamptz" "updatedAt" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecTimestamptz |> .decoder)


username : SelectionSet String CdbGQL.Object.Account
username =
    Object.selectionForField "String" "username" [] Decode.string
