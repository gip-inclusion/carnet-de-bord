-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module CdbGQL.Object.Notebook_target exposing (..)

import CdbGQL.Enum.Notebook_action_select_column
import CdbGQL.InputObject
import CdbGQL.Interface
import CdbGQL.Object
import CdbGQL.Scalar
import CdbGQL.ScalarCodecs
import CdbGQL.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


type alias ActionsOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Notebook_action_select_column.Notebook_action_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Notebook_action_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Notebook_action_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
actions :
    (ActionsOptionalArguments -> ActionsOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Notebook_action
    -> SelectionSet (List decodesTo) CdbGQL.Object.Notebook_target
actions fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Notebook_action_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeNotebook_action_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeNotebook_action_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "actions" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias ActionsAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Notebook_action_select_column.Notebook_action_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Notebook_action_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Notebook_action_bool_exp
    }


{-| An aggregate relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
actions_aggregate :
    (ActionsAggregateOptionalArguments -> ActionsAggregateOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Notebook_action_aggregate
    -> SelectionSet decodesTo CdbGQL.Object.Notebook_target
actions_aggregate fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Notebook_action_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeNotebook_action_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeNotebook_action_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "actions_aggregate" optionalArgs____ object____ Basics.identity


createdAt : SelectionSet CdbGQL.ScalarCodecs.Timestamptz CdbGQL.Object.Notebook_target
createdAt =
    Object.selectionForField "ScalarCodecs.Timestamptz" "createdAt" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecTimestamptz |> .decoder)


{-| An object relationship
-}
creator :
    SelectionSet decodesTo CdbGQL.Object.Account
    -> SelectionSet decodesTo CdbGQL.Object.Notebook_target
creator object____ =
    Object.selectionForCompositeField "creator" [] object____ Basics.identity


creatorId : SelectionSet CdbGQL.ScalarCodecs.Uuid CdbGQL.Object.Notebook_target
creatorId =
    Object.selectionForField "ScalarCodecs.Uuid" "creatorId" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecUuid |> .decoder)


{-| An object relationship
-}
focus :
    SelectionSet decodesTo CdbGQL.Object.Notebook_focus
    -> SelectionSet decodesTo CdbGQL.Object.Notebook_target
focus object____ =
    Object.selectionForCompositeField "focus" [] object____ Basics.identity


focusId : SelectionSet CdbGQL.ScalarCodecs.Uuid CdbGQL.Object.Notebook_target
focusId =
    Object.selectionForField "ScalarCodecs.Uuid" "focusId" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecUuid |> .decoder)


id : SelectionSet CdbGQL.ScalarCodecs.Uuid CdbGQL.Object.Notebook_target
id =
    Object.selectionForField "ScalarCodecs.Uuid" "id" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecUuid |> .decoder)


status : SelectionSet String CdbGQL.Object.Notebook_target
status =
    Object.selectionForField "String" "status" [] Decode.string


target : SelectionSet String CdbGQL.Object.Notebook_target
target =
    Object.selectionForField "String" "target" [] Decode.string


updatedAt : SelectionSet CdbGQL.ScalarCodecs.Timestamptz CdbGQL.Object.Notebook_target
updatedAt =
    Object.selectionForField "ScalarCodecs.Timestamptz" "updatedAt" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecTimestamptz |> .decoder)
