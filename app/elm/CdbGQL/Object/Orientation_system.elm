-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module CdbGQL.Object.Orientation_system exposing (..)

import CdbGQL.Enum.Orientation_type_enum
import CdbGQL.Enum.Professional_orientation_system_select_column
import CdbGQL.Enum.Structure_orientation_system_select_column
import CdbGQL.InputObject
import CdbGQL.Interface
import CdbGQL.Object
import CdbGQL.Scalar
import CdbGQL.ScalarCodecs
import CdbGQL.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| An object relationship
-}
beneficiaries :
    SelectionSet decodesTo CdbGQL.Object.Notebook_info
    -> SelectionSet (Maybe decodesTo) CdbGQL.Object.Orientation_system
beneficiaries object____ =
    Object.selectionForCompositeField "beneficiaries" [] object____ (Basics.identity >> Decode.nullable)


createdAt : SelectionSet CdbGQL.ScalarCodecs.Timestamptz CdbGQL.Object.Orientation_system
createdAt =
    Object.selectionForField "ScalarCodecs.Timestamptz" "createdAt" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecTimestamptz |> .decoder)


{-| An object relationship
-}
deployment :
    SelectionSet decodesTo CdbGQL.Object.Deployment
    -> SelectionSet decodesTo CdbGQL.Object.Orientation_system
deployment object____ =
    Object.selectionForCompositeField "deployment" [] object____ Basics.identity


deployment_id : SelectionSet CdbGQL.ScalarCodecs.Uuid CdbGQL.Object.Orientation_system
deployment_id =
    Object.selectionForField "ScalarCodecs.Uuid" "deployment_id" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecUuid |> .decoder)


id : SelectionSet CdbGQL.ScalarCodecs.Uuid CdbGQL.Object.Orientation_system
id =
    Object.selectionForField "ScalarCodecs.Uuid" "id" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecUuid |> .decoder)


name : SelectionSet String CdbGQL.Object.Orientation_system
name =
    Object.selectionForField "String" "name" [] Decode.string


orientationType : SelectionSet CdbGQL.Enum.Orientation_type_enum.Orientation_type_enum CdbGQL.Object.Orientation_system
orientationType =
    Object.selectionForField "Enum.Orientation_type_enum.Orientation_type_enum" "orientationType" [] CdbGQL.Enum.Orientation_type_enum.decoder


{-| An object relationship
-}
orientationTypeByOrientationType :
    SelectionSet decodesTo CdbGQL.Object.Orientation_type
    -> SelectionSet decodesTo CdbGQL.Object.Orientation_system
orientationTypeByOrientationType object____ =
    Object.selectionForCompositeField "orientationTypeByOrientationType" [] object____ Basics.identity


type alias ProfessionalOrientationSystemsOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Professional_orientation_system_select_column.Professional_orientation_system_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Professional_orientation_system_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Professional_orientation_system_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
professionalOrientationSystems :
    (ProfessionalOrientationSystemsOptionalArguments -> ProfessionalOrientationSystemsOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Professional_orientation_system
    -> SelectionSet (List decodesTo) CdbGQL.Object.Orientation_system
professionalOrientationSystems fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Professional_orientation_system_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeProfessional_orientation_system_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeProfessional_orientation_system_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "professionalOrientationSystems" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias ProfessionalOrientationSystemsAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Professional_orientation_system_select_column.Professional_orientation_system_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Professional_orientation_system_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Professional_orientation_system_bool_exp
    }


{-| An aggregate relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
professionalOrientationSystems_aggregate :
    (ProfessionalOrientationSystemsAggregateOptionalArguments -> ProfessionalOrientationSystemsAggregateOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Professional_orientation_system_aggregate
    -> SelectionSet decodesTo CdbGQL.Object.Orientation_system
professionalOrientationSystems_aggregate fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Professional_orientation_system_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeProfessional_orientation_system_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeProfessional_orientation_system_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "professionalOrientationSystems_aggregate" optionalArgs____ object____ Basics.identity


type alias StructureOrientationSystemsOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Structure_orientation_system_select_column.Structure_orientation_system_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Structure_orientation_system_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Structure_orientation_system_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
structureOrientationSystems :
    (StructureOrientationSystemsOptionalArguments -> StructureOrientationSystemsOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Structure_orientation_system
    -> SelectionSet (List decodesTo) CdbGQL.Object.Orientation_system
structureOrientationSystems fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Structure_orientation_system_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeStructure_orientation_system_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeStructure_orientation_system_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "structureOrientationSystems" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias StructureOrientationSystemsAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Structure_orientation_system_select_column.Structure_orientation_system_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Structure_orientation_system_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Structure_orientation_system_bool_exp
    }


{-| An aggregate relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
structureOrientationSystems_aggregate :
    (StructureOrientationSystemsAggregateOptionalArguments -> StructureOrientationSystemsAggregateOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Structure_orientation_system_aggregate
    -> SelectionSet decodesTo CdbGQL.Object.Orientation_system
structureOrientationSystems_aggregate fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Structure_orientation_system_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeStructure_orientation_system_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeStructure_orientation_system_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "structureOrientationSystems_aggregate" optionalArgs____ object____ Basics.identity


updatedAt : SelectionSet CdbGQL.ScalarCodecs.Timestamptz CdbGQL.Object.Orientation_system
updatedAt =
    Object.selectionForField "ScalarCodecs.Timestamptz" "updatedAt" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecTimestamptz |> .decoder)
