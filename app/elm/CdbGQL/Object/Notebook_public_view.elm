-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module CdbGQL.Object.Notebook_public_view exposing (..)

import CdbGQL.Enum.Notebook_member_select_column
import CdbGQL.InputObject
import CdbGQL.Interface
import CdbGQL.Object
import CdbGQL.Scalar
import CdbGQL.ScalarCodecs
import CdbGQL.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| An object relationship
-}
beneficiary :
    SelectionSet decodesTo CdbGQL.Object.Beneficiary
    -> SelectionSet (Maybe decodesTo) CdbGQL.Object.Notebook_public_view
beneficiary object____ =
    Object.selectionForCompositeField "beneficiary" [] object____ (Basics.identity >> Decode.nullable)


beneficiary_id : SelectionSet (Maybe CdbGQL.ScalarCodecs.Uuid) CdbGQL.Object.Notebook_public_view
beneficiary_id =
    Object.selectionForField "(Maybe ScalarCodecs.Uuid)" "beneficiary_id" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecUuid |> .decoder |> Decode.nullable)


created_at : SelectionSet (Maybe CdbGQL.ScalarCodecs.Timestamptz) CdbGQL.Object.Notebook_public_view
created_at =
    Object.selectionForField "(Maybe ScalarCodecs.Timestamptz)" "created_at" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecTimestamptz |> .decoder |> Decode.nullable)


id : SelectionSet (Maybe CdbGQL.ScalarCodecs.Uuid) CdbGQL.Object.Notebook_public_view
id =
    Object.selectionForField "(Maybe ScalarCodecs.Uuid)" "id" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecUuid |> .decoder |> Decode.nullable)


type alias MembersOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Notebook_member_select_column.Notebook_member_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Notebook_member_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Notebook_member_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
members :
    (MembersOptionalArguments -> MembersOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Notebook_member
    -> SelectionSet (List decodesTo) CdbGQL.Object.Notebook_public_view
members fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Notebook_member_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeNotebook_member_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeNotebook_member_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "members" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias MembersAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Notebook_member_select_column.Notebook_member_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Notebook_member_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Notebook_member_bool_exp
    }


{-| An aggregate relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
members_aggregate :
    (MembersAggregateOptionalArguments -> MembersAggregateOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Notebook_member_aggregate
    -> SelectionSet decodesTo CdbGQL.Object.Notebook_public_view
members_aggregate fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Notebook_member_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeNotebook_member_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeNotebook_member_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "members_aggregate" optionalArgs____ object____ Basics.identity


{-| An object relationship
-}
notebook :
    SelectionSet decodesTo CdbGQL.Object.Notebook
    -> SelectionSet (Maybe decodesTo) CdbGQL.Object.Notebook_public_view
notebook object____ =
    Object.selectionForCompositeField "notebook" [] object____ (Basics.identity >> Decode.nullable)


updated_at : SelectionSet (Maybe CdbGQL.ScalarCodecs.Timestamptz) CdbGQL.Object.Notebook_public_view
updated_at =
    Object.selectionForField "(Maybe ScalarCodecs.Timestamptz)" "updated_at" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecTimestamptz |> .decoder |> Decode.nullable)
