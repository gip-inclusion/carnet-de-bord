-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module CdbGQL.Object.Beneficiary exposing (..)

import CdbGQL.Enum.Beneficiary_structure_select_column
import CdbGQL.Enum.External_data_info_select_column
import CdbGQL.Enum.Orientation_request_select_column
import CdbGQL.Enum.Rsa_closure_reason_enum
import CdbGQL.Enum.Rsa_suspension_reason_enum
import CdbGQL.InputObject
import CdbGQL.Interface
import CdbGQL.Object
import CdbGQL.Scalar
import CdbGQL.ScalarCodecs
import CdbGQL.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| An object relationship
-}
account :
    SelectionSet decodesTo CdbGQL.Object.Account
    -> SelectionSet (Maybe decodesTo) CdbGQL.Object.Beneficiary
account object____ =
    Object.selectionForCompositeField "account" [] object____ (Basics.identity >> Decode.nullable)


address1 : SelectionSet (Maybe String) CdbGQL.Object.Beneficiary
address1 =
    Object.selectionForField "(Maybe String)" "address1" [] (Decode.string |> Decode.nullable)


address2 : SelectionSet (Maybe String) CdbGQL.Object.Beneficiary
address2 =
    Object.selectionForField "(Maybe String)" "address2" [] (Decode.string |> Decode.nullable)


cafNumber : SelectionSet (Maybe String) CdbGQL.Object.Beneficiary
cafNumber =
    Object.selectionForField "(Maybe String)" "cafNumber" [] (Decode.string |> Decode.nullable)


city : SelectionSet (Maybe String) CdbGQL.Object.Beneficiary
city =
    Object.selectionForField "(Maybe String)" "city" [] (Decode.string |> Decode.nullable)


createdAt : SelectionSet CdbGQL.ScalarCodecs.Timestamptz CdbGQL.Object.Beneficiary
createdAt =
    Object.selectionForField "ScalarCodecs.Timestamptz" "createdAt" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecTimestamptz |> .decoder)


dateOfBirth : SelectionSet CdbGQL.ScalarCodecs.Date CdbGQL.Object.Beneficiary
dateOfBirth =
    Object.selectionForField "ScalarCodecs.Date" "dateOfBirth" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecDate |> .decoder)


{-| An object relationship
-}
deployment :
    SelectionSet decodesTo CdbGQL.Object.Deployment
    -> SelectionSet decodesTo CdbGQL.Object.Beneficiary
deployment object____ =
    Object.selectionForCompositeField "deployment" [] object____ Basics.identity


deploymentId : SelectionSet CdbGQL.ScalarCodecs.Uuid CdbGQL.Object.Beneficiary
deploymentId =
    Object.selectionForField "ScalarCodecs.Uuid" "deploymentId" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecUuid |> .decoder)


email : SelectionSet (Maybe CdbGQL.ScalarCodecs.Citext) CdbGQL.Object.Beneficiary
email =
    Object.selectionForField "(Maybe ScalarCodecs.Citext)" "email" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecCitext |> .decoder |> Decode.nullable)


type alias ExternalDataInfosOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.External_data_info_select_column.External_data_info_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.External_data_info_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.External_data_info_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
externalDataInfos :
    (ExternalDataInfosOptionalArguments -> ExternalDataInfosOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.External_data_info
    -> SelectionSet (List decodesTo) CdbGQL.Object.Beneficiary
externalDataInfos fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.External_data_info_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeExternal_data_info_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeExternal_data_info_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "externalDataInfos" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias ExternalDataInfosAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.External_data_info_select_column.External_data_info_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.External_data_info_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.External_data_info_bool_exp
    }


{-| An aggregate relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
externalDataInfos_aggregate :
    (ExternalDataInfosAggregateOptionalArguments -> ExternalDataInfosAggregateOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.External_data_info_aggregate
    -> SelectionSet decodesTo CdbGQL.Object.Beneficiary
externalDataInfos_aggregate fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.External_data_info_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeExternal_data_info_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeExternal_data_info_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "externalDataInfos_aggregate" optionalArgs____ object____ Basics.identity


firstname : SelectionSet String CdbGQL.Object.Beneficiary
firstname =
    Object.selectionForField "String" "firstname" [] Decode.string


id : SelectionSet CdbGQL.ScalarCodecs.Uuid CdbGQL.Object.Beneficiary
id =
    Object.selectionForField "ScalarCodecs.Uuid" "id" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecUuid |> .decoder)


internalId : SelectionSet (Maybe String) CdbGQL.Object.Beneficiary
internalId =
    Object.selectionForField "(Maybe String)" "internalId" [] (Decode.string |> Decode.nullable)


isHomeless : SelectionSet (Maybe Bool) CdbGQL.Object.Beneficiary
isHomeless =
    Object.selectionForField "(Maybe Bool)" "isHomeless" [] (Decode.bool |> Decode.nullable)


lastname : SelectionSet String CdbGQL.Object.Beneficiary
lastname =
    Object.selectionForField "String" "lastname" [] Decode.string


mobileNumber : SelectionSet (Maybe String) CdbGQL.Object.Beneficiary
mobileNumber =
    Object.selectionForField "(Maybe String)" "mobileNumber" [] (Decode.string |> Decode.nullable)


nir : SelectionSet (Maybe String) CdbGQL.Object.Beneficiary
nir =
    Object.selectionForField "(Maybe String)" "nir" [] (Decode.string |> Decode.nullable)


{-| An object relationship
-}
notebook :
    SelectionSet decodesTo CdbGQL.Object.Notebook
    -> SelectionSet (Maybe decodesTo) CdbGQL.Object.Beneficiary
notebook object____ =
    Object.selectionForCompositeField "notebook" [] object____ (Basics.identity >> Decode.nullable)


{-| An object relationship
-}
notebook_public_view :
    SelectionSet decodesTo CdbGQL.Object.Notebook_public_view
    -> SelectionSet (Maybe decodesTo) CdbGQL.Object.Beneficiary
notebook_public_view object____ =
    Object.selectionForCompositeField "notebook_public_view" [] object____ (Basics.identity >> Decode.nullable)


type alias OrientationRequestOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Orientation_request_select_column.Orientation_request_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Orientation_request_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Orientation_request_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
orientationRequest :
    (OrientationRequestOptionalArguments -> OrientationRequestOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Orientation_request
    -> SelectionSet (List decodesTo) CdbGQL.Object.Beneficiary
orientationRequest fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Orientation_request_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeOrientation_request_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeOrientation_request_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "orientationRequest" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias OrientationRequestAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Orientation_request_select_column.Orientation_request_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Orientation_request_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Orientation_request_bool_exp
    }


{-| An aggregate relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
orientationRequest_aggregate :
    (OrientationRequestAggregateOptionalArguments -> OrientationRequestAggregateOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Orientation_request_aggregate
    -> SelectionSet decodesTo CdbGQL.Object.Beneficiary
orientationRequest_aggregate fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Orientation_request_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeOrientation_request_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeOrientation_request_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "orientationRequest_aggregate" optionalArgs____ object____ Basics.identity


peNumber : SelectionSet (Maybe String) CdbGQL.Object.Beneficiary
peNumber =
    Object.selectionForField "(Maybe String)" "peNumber" [] (Decode.string |> Decode.nullable)


peUniqueId : SelectionSet (Maybe String) CdbGQL.Object.Beneficiary
peUniqueId =
    Object.selectionForField "(Maybe String)" "peUniqueId" [] (Decode.string |> Decode.nullable)


placeOfBirth : SelectionSet (Maybe String) CdbGQL.Object.Beneficiary
placeOfBirth =
    Object.selectionForField "(Maybe String)" "placeOfBirth" [] (Decode.string |> Decode.nullable)


postalCode : SelectionSet (Maybe String) CdbGQL.Object.Beneficiary
postalCode =
    Object.selectionForField "(Maybe String)" "postalCode" [] (Decode.string |> Decode.nullable)


rightAre : SelectionSet Bool CdbGQL.Object.Beneficiary
rightAre =
    Object.selectionForField "Bool" "rightAre" [] Decode.bool


rightAss : SelectionSet Bool CdbGQL.Object.Beneficiary
rightAss =
    Object.selectionForField "Bool" "rightAss" [] Decode.bool


rightBonus : SelectionSet Bool CdbGQL.Object.Beneficiary
rightBonus =
    Object.selectionForField "Bool" "rightBonus" [] Decode.bool


rightRsa : SelectionSet (Maybe String) CdbGQL.Object.Beneficiary
rightRsa =
    Object.selectionForField "(Maybe String)" "rightRsa" [] (Decode.string |> Decode.nullable)


rsaClosureDate : SelectionSet (Maybe CdbGQL.ScalarCodecs.Date) CdbGQL.Object.Beneficiary
rsaClosureDate =
    Object.selectionForField "(Maybe ScalarCodecs.Date)" "rsaClosureDate" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecDate |> .decoder |> Decode.nullable)


rsaClosureReason : SelectionSet (Maybe CdbGQL.Enum.Rsa_closure_reason_enum.Rsa_closure_reason_enum) CdbGQL.Object.Beneficiary
rsaClosureReason =
    Object.selectionForField "(Maybe Enum.Rsa_closure_reason_enum.Rsa_closure_reason_enum)" "rsaClosureReason" [] (CdbGQL.Enum.Rsa_closure_reason_enum.decoder |> Decode.nullable)


rsaSuspensionReason : SelectionSet (Maybe CdbGQL.Enum.Rsa_suspension_reason_enum.Rsa_suspension_reason_enum) CdbGQL.Object.Beneficiary
rsaSuspensionReason =
    Object.selectionForField "(Maybe Enum.Rsa_suspension_reason_enum.Rsa_suspension_reason_enum)" "rsaSuspensionReason" [] (CdbGQL.Enum.Rsa_suspension_reason_enum.decoder |> Decode.nullable)


type alias StructuresOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Beneficiary_structure_select_column.Beneficiary_structure_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Beneficiary_structure_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Beneficiary_structure_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
structures :
    (StructuresOptionalArguments -> StructuresOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Beneficiary_structure
    -> SelectionSet (List decodesTo) CdbGQL.Object.Beneficiary
structures fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Beneficiary_structure_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeBeneficiary_structure_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeBeneficiary_structure_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "structures" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias StructuresAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Beneficiary_structure_select_column.Beneficiary_structure_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Beneficiary_structure_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Beneficiary_structure_bool_exp
    }


{-| An aggregate relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
structures_aggregate :
    (StructuresAggregateOptionalArguments -> StructuresAggregateOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Beneficiary_structure_aggregate
    -> SelectionSet decodesTo CdbGQL.Object.Beneficiary
structures_aggregate fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Beneficiary_structure_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeBeneficiary_structure_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeBeneficiary_structure_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "structures_aggregate" optionalArgs____ object____ Basics.identity


subjectToRightAndDuty : SelectionSet (Maybe Bool) CdbGQL.Object.Beneficiary
subjectToRightAndDuty =
    Object.selectionForField "(Maybe Bool)" "subjectToRightAndDuty" [] (Decode.bool |> Decode.nullable)


updatedAt : SelectionSet CdbGQL.ScalarCodecs.Timestamptz CdbGQL.Object.Beneficiary
updatedAt =
    Object.selectionForField "ScalarCodecs.Timestamptz" "updatedAt" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecTimestamptz |> .decoder)
