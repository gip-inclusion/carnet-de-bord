-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module CdbGQL.Object.Admin_structure exposing (..)

import CdbGQL.Enum.Admin_structure_structure_select_column
import CdbGQL.InputObject
import CdbGQL.Interface
import CdbGQL.Object
import CdbGQL.Scalar
import CdbGQL.ScalarCodecs
import CdbGQL.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| An object relationship
-}
account :
    SelectionSet decodesTo CdbGQL.Object.Account
    -> SelectionSet (Maybe decodesTo) CdbGQL.Object.Admin_structure
account object____ =
    Object.selectionForCompositeField "account" [] object____ (Basics.identity >> Decode.nullable)


createdAt : SelectionSet CdbGQL.ScalarCodecs.Timestamptz CdbGQL.Object.Admin_structure
createdAt =
    Object.selectionForField "ScalarCodecs.Timestamptz" "createdAt" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecTimestamptz |> .decoder)


{-| An object relationship
-}
deployment :
    SelectionSet decodesTo CdbGQL.Object.Deployment
    -> SelectionSet decodesTo CdbGQL.Object.Admin_structure
deployment object____ =
    Object.selectionForCompositeField "deployment" [] object____ Basics.identity


deploymentId : SelectionSet CdbGQL.ScalarCodecs.Uuid CdbGQL.Object.Admin_structure
deploymentId =
    Object.selectionForField "ScalarCodecs.Uuid" "deploymentId" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecUuid |> .decoder)


email : SelectionSet CdbGQL.ScalarCodecs.Citext CdbGQL.Object.Admin_structure
email =
    Object.selectionForField "ScalarCodecs.Citext" "email" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecCitext |> .decoder)


firstname : SelectionSet (Maybe String) CdbGQL.Object.Admin_structure
firstname =
    Object.selectionForField "(Maybe String)" "firstname" [] (Decode.string |> Decode.nullable)


id : SelectionSet CdbGQL.ScalarCodecs.Uuid CdbGQL.Object.Admin_structure
id =
    Object.selectionForField "ScalarCodecs.Uuid" "id" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecUuid |> .decoder)


lastname : SelectionSet (Maybe String) CdbGQL.Object.Admin_structure
lastname =
    Object.selectionForField "(Maybe String)" "lastname" [] (Decode.string |> Decode.nullable)


phoneNumbers : SelectionSet (Maybe String) CdbGQL.Object.Admin_structure
phoneNumbers =
    Object.selectionForField "(Maybe String)" "phoneNumbers" [] (Decode.string |> Decode.nullable)


position : SelectionSet (Maybe String) CdbGQL.Object.Admin_structure
position =
    Object.selectionForField "(Maybe String)" "position" [] (Decode.string |> Decode.nullable)


type alias StructuresOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Admin_structure_structure_select_column.Admin_structure_structure_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Admin_structure_structure_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Admin_structure_structure_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
structures :
    (StructuresOptionalArguments -> StructuresOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Admin_structure_structure
    -> SelectionSet (List decodesTo) CdbGQL.Object.Admin_structure
structures fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Admin_structure_structure_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeAdmin_structure_structure_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeAdmin_structure_structure_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "structures" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias StructuresAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Admin_structure_structure_select_column.Admin_structure_structure_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Admin_structure_structure_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Admin_structure_structure_bool_exp
    }


{-| An aggregate relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
structures_aggregate :
    (StructuresAggregateOptionalArguments -> StructuresAggregateOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Admin_structure_structure_aggregate
    -> SelectionSet decodesTo CdbGQL.Object.Admin_structure
structures_aggregate fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Admin_structure_structure_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeAdmin_structure_structure_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeAdmin_structure_structure_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "structures_aggregate" optionalArgs____ object____ Basics.identity


updatedAt : SelectionSet CdbGQL.ScalarCodecs.Timestamptz CdbGQL.Object.Admin_structure
updatedAt =
    Object.selectionForField "ScalarCodecs.Timestamptz" "updatedAt" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecTimestamptz |> .decoder)
