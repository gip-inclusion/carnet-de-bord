-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module CdbGQL.Object.Structure exposing (..)

import CdbGQL.Enum.Admin_structure_structure_select_column
import CdbGQL.Enum.Beneficiary_structure_select_column
import CdbGQL.Enum.Professional_select_column
import CdbGQL.Enum.Structure_orientation_system_select_column
import CdbGQL.InputObject
import CdbGQL.Interface
import CdbGQL.Object
import CdbGQL.Scalar
import CdbGQL.ScalarCodecs
import CdbGQL.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


address1 : SelectionSet (Maybe String) CdbGQL.Object.Structure
address1 =
    Object.selectionForField "(Maybe String)" "address1" [] (Decode.string |> Decode.nullable)


address2 : SelectionSet (Maybe String) CdbGQL.Object.Structure
address2 =
    Object.selectionForField "(Maybe String)" "address2" [] (Decode.string |> Decode.nullable)


type alias AdminsOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Admin_structure_structure_select_column.Admin_structure_structure_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Admin_structure_structure_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Admin_structure_structure_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
admins :
    (AdminsOptionalArguments -> AdminsOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Admin_structure_structure
    -> SelectionSet (List decodesTo) CdbGQL.Object.Structure
admins fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Admin_structure_structure_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeAdmin_structure_structure_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeAdmin_structure_structure_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "admins" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias AdminsAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Admin_structure_structure_select_column.Admin_structure_structure_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Admin_structure_structure_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Admin_structure_structure_bool_exp
    }


{-| An aggregate relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
admins_aggregate :
    (AdminsAggregateOptionalArguments -> AdminsAggregateOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Admin_structure_structure_aggregate
    -> SelectionSet decodesTo CdbGQL.Object.Structure
admins_aggregate fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Admin_structure_structure_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeAdmin_structure_structure_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeAdmin_structure_structure_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "admins_aggregate" optionalArgs____ object____ Basics.identity


type alias BeneficiariesOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Beneficiary_structure_select_column.Beneficiary_structure_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Beneficiary_structure_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Beneficiary_structure_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
beneficiaries :
    (BeneficiariesOptionalArguments -> BeneficiariesOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Beneficiary_structure
    -> SelectionSet (List decodesTo) CdbGQL.Object.Structure
beneficiaries fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Beneficiary_structure_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeBeneficiary_structure_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeBeneficiary_structure_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "beneficiaries" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias BeneficiariesAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Beneficiary_structure_select_column.Beneficiary_structure_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Beneficiary_structure_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Beneficiary_structure_bool_exp
    }


{-| An aggregate relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
beneficiaries_aggregate :
    (BeneficiariesAggregateOptionalArguments -> BeneficiariesAggregateOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Beneficiary_structure_aggregate
    -> SelectionSet decodesTo CdbGQL.Object.Structure
beneficiaries_aggregate fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Beneficiary_structure_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeBeneficiary_structure_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeBeneficiary_structure_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "beneficiaries_aggregate" optionalArgs____ object____ Basics.identity


city : SelectionSet (Maybe String) CdbGQL.Object.Structure
city =
    Object.selectionForField "(Maybe String)" "city" [] (Decode.string |> Decode.nullable)


createdAt : SelectionSet (Maybe CdbGQL.ScalarCodecs.Timestamptz) CdbGQL.Object.Structure
createdAt =
    Object.selectionForField "(Maybe ScalarCodecs.Timestamptz)" "createdAt" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecTimestamptz |> .decoder |> Decode.nullable)


{-| An object relationship
-}
deployment :
    SelectionSet decodesTo CdbGQL.Object.Deployment
    -> SelectionSet decodesTo CdbGQL.Object.Structure
deployment object____ =
    Object.selectionForCompositeField "deployment" [] object____ Basics.identity


deploymentId : SelectionSet CdbGQL.ScalarCodecs.Uuid CdbGQL.Object.Structure
deploymentId =
    Object.selectionForField "ScalarCodecs.Uuid" "deploymentId" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecUuid |> .decoder)


email : SelectionSet (Maybe String) CdbGQL.Object.Structure
email =
    Object.selectionForField "(Maybe String)" "email" [] (Decode.string |> Decode.nullable)


id : SelectionSet CdbGQL.ScalarCodecs.Uuid CdbGQL.Object.Structure
id =
    Object.selectionForField "ScalarCodecs.Uuid" "id" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecUuid |> .decoder)


name : SelectionSet CdbGQL.ScalarCodecs.Citext CdbGQL.Object.Structure
name =
    Object.selectionForField "ScalarCodecs.Citext" "name" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecCitext |> .decoder)


type alias OrientationSystemsOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Structure_orientation_system_select_column.Structure_orientation_system_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Structure_orientation_system_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Structure_orientation_system_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
orientationSystems :
    (OrientationSystemsOptionalArguments -> OrientationSystemsOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Structure_orientation_system
    -> SelectionSet (List decodesTo) CdbGQL.Object.Structure
orientationSystems fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Structure_orientation_system_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeStructure_orientation_system_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeStructure_orientation_system_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "orientationSystems" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias OrientationSystemsAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Structure_orientation_system_select_column.Structure_orientation_system_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Structure_orientation_system_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Structure_orientation_system_bool_exp
    }


{-| An aggregate relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
orientationSystems_aggregate :
    (OrientationSystemsAggregateOptionalArguments -> OrientationSystemsAggregateOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Structure_orientation_system_aggregate
    -> SelectionSet decodesTo CdbGQL.Object.Structure
orientationSystems_aggregate fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Structure_orientation_system_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeStructure_orientation_system_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeStructure_orientation_system_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "orientationSystems_aggregate" optionalArgs____ object____ Basics.identity


phone : SelectionSet (Maybe String) CdbGQL.Object.Structure
phone =
    Object.selectionForField "(Maybe String)" "phone" [] (Decode.string |> Decode.nullable)


postalCode : SelectionSet (Maybe String) CdbGQL.Object.Structure
postalCode =
    Object.selectionForField "(Maybe String)" "postalCode" [] (Decode.string |> Decode.nullable)


type alias ProfessionalsOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Professional_select_column.Professional_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Professional_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Professional_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
professionals :
    (ProfessionalsOptionalArguments -> ProfessionalsOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Professional
    -> SelectionSet (List decodesTo) CdbGQL.Object.Structure
professionals fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Professional_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeProfessional_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeProfessional_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "professionals" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias ProfessionalsAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Professional_select_column.Professional_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Professional_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Professional_bool_exp
    }


{-| An aggregate relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
professionals_aggregate :
    (ProfessionalsAggregateOptionalArguments -> ProfessionalsAggregateOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Professional_aggregate
    -> SelectionSet decodesTo CdbGQL.Object.Structure
professionals_aggregate fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Professional_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeProfessional_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeProfessional_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "professionals_aggregate" optionalArgs____ object____ Basics.identity


shortDesc : SelectionSet (Maybe String) CdbGQL.Object.Structure
shortDesc =
    Object.selectionForField "(Maybe String)" "shortDesc" [] (Decode.string |> Decode.nullable)


siret : SelectionSet (Maybe String) CdbGQL.Object.Structure
siret =
    Object.selectionForField "(Maybe String)" "siret" [] (Decode.string |> Decode.nullable)


updatedAt : SelectionSet (Maybe CdbGQL.ScalarCodecs.Timestamptz) CdbGQL.Object.Structure
updatedAt =
    Object.selectionForField "(Maybe ScalarCodecs.Timestamptz)" "updatedAt" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecTimestamptz |> .decoder |> Decode.nullable)


website : SelectionSet (Maybe String) CdbGQL.Object.Structure
website =
    Object.selectionForField "(Maybe String)" "website" [] (Decode.string |> Decode.nullable)
