-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module CdbGQL.Object.Deployment exposing (..)

import CdbGQL.Enum.Admin_structure_select_column
import CdbGQL.Enum.Beneficiary_select_column
import CdbGQL.Enum.Manager_select_column
import CdbGQL.Enum.Orientation_manager_select_column
import CdbGQL.Enum.Orientation_system_select_column
import CdbGQL.Enum.Structure_select_column
import CdbGQL.InputObject
import CdbGQL.Interface
import CdbGQL.Object
import CdbGQL.Scalar
import CdbGQL.ScalarCodecs
import CdbGQL.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


type alias AdminStructuresOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Admin_structure_select_column.Admin_structure_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Admin_structure_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Admin_structure_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
admin_structures :
    (AdminStructuresOptionalArguments -> AdminStructuresOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Admin_structure
    -> SelectionSet (List decodesTo) CdbGQL.Object.Deployment
admin_structures fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Admin_structure_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeAdmin_structure_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeAdmin_structure_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "admin_structures" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias AdminStructuresAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Admin_structure_select_column.Admin_structure_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Admin_structure_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Admin_structure_bool_exp
    }


{-| An aggregate relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
admin_structures_aggregate :
    (AdminStructuresAggregateOptionalArguments -> AdminStructuresAggregateOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Admin_structure_aggregate
    -> SelectionSet decodesTo CdbGQL.Object.Deployment
admin_structures_aggregate fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Admin_structure_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeAdmin_structure_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeAdmin_structure_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "admin_structures_aggregate" optionalArgs____ object____ Basics.identity


type alias BeneficiariesOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Beneficiary_select_column.Beneficiary_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Beneficiary_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Beneficiary_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
beneficiaries :
    (BeneficiariesOptionalArguments -> BeneficiariesOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Beneficiary
    -> SelectionSet (List decodesTo) CdbGQL.Object.Deployment
beneficiaries fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Beneficiary_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeBeneficiary_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeBeneficiary_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "beneficiaries" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias BeneficiariesAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Beneficiary_select_column.Beneficiary_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Beneficiary_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Beneficiary_bool_exp
    }


{-| An aggregate relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
beneficiaries_aggregate :
    (BeneficiariesAggregateOptionalArguments -> BeneficiariesAggregateOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Beneficiary_aggregate
    -> SelectionSet decodesTo CdbGQL.Object.Deployment
beneficiaries_aggregate fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Beneficiary_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeBeneficiary_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeBeneficiary_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "beneficiaries_aggregate" optionalArgs____ object____ Basics.identity


type alias ConfigOptionalArguments =
    { path : OptionalArgument String }


{-|

  - path - JSON select path

-}
config :
    (ConfigOptionalArguments -> ConfigOptionalArguments)
    -> SelectionSet (Maybe CdbGQL.ScalarCodecs.Jsonb) CdbGQL.Object.Deployment
config fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { path = Absent }

        optionalArgs____ =
            [ Argument.optional "path" filledInOptionals____.path Encode.string ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForField "(Maybe ScalarCodecs.Jsonb)" "config" optionalArgs____ (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecJsonb |> .decoder |> Decode.nullable)


createdAt : SelectionSet CdbGQL.ScalarCodecs.Timestamptz CdbGQL.Object.Deployment
createdAt =
    Object.selectionForField "ScalarCodecs.Timestamptz" "createdAt" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecTimestamptz |> .decoder)


departmentCode : SelectionSet (Maybe String) CdbGQL.Object.Deployment
departmentCode =
    Object.selectionForField "(Maybe String)" "departmentCode" [] (Decode.string |> Decode.nullable)


id : SelectionSet CdbGQL.ScalarCodecs.Uuid CdbGQL.Object.Deployment
id =
    Object.selectionForField "ScalarCodecs.Uuid" "id" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecUuid |> .decoder)


label : SelectionSet String CdbGQL.Object.Deployment
label =
    Object.selectionForField "String" "label" [] Decode.string


type alias ManagersOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Manager_select_column.Manager_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Manager_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Manager_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
managers :
    (ManagersOptionalArguments -> ManagersOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Manager
    -> SelectionSet (List decodesTo) CdbGQL.Object.Deployment
managers fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Manager_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeManager_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeManager_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "managers" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias ManagersAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Manager_select_column.Manager_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Manager_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Manager_bool_exp
    }


{-| An aggregate relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
managers_aggregate :
    (ManagersAggregateOptionalArguments -> ManagersAggregateOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Manager_aggregate
    -> SelectionSet decodesTo CdbGQL.Object.Deployment
managers_aggregate fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Manager_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeManager_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeManager_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "managers_aggregate" optionalArgs____ object____ Basics.identity


type alias OrientationSystemsOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Orientation_system_select_column.Orientation_system_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Orientation_system_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Orientation_system_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
orientationSystems :
    (OrientationSystemsOptionalArguments -> OrientationSystemsOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Orientation_system
    -> SelectionSet (List decodesTo) CdbGQL.Object.Deployment
orientationSystems fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Orientation_system_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeOrientation_system_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeOrientation_system_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "orientationSystems" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias OrientationSystemsAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Orientation_system_select_column.Orientation_system_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Orientation_system_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Orientation_system_bool_exp
    }


{-| An aggregate relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
orientationSystems_aggregate :
    (OrientationSystemsAggregateOptionalArguments -> OrientationSystemsAggregateOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Orientation_system_aggregate
    -> SelectionSet decodesTo CdbGQL.Object.Deployment
orientationSystems_aggregate fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Orientation_system_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeOrientation_system_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeOrientation_system_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "orientationSystems_aggregate" optionalArgs____ object____ Basics.identity


type alias OrientationManagersOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Orientation_manager_select_column.Orientation_manager_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Orientation_manager_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Orientation_manager_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
orientation_managers :
    (OrientationManagersOptionalArguments -> OrientationManagersOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Orientation_manager
    -> SelectionSet (List decodesTo) CdbGQL.Object.Deployment
orientation_managers fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Orientation_manager_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeOrientation_manager_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeOrientation_manager_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "orientation_managers" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias OrientationManagersAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Orientation_manager_select_column.Orientation_manager_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Orientation_manager_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Orientation_manager_bool_exp
    }


{-| An aggregate relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
orientation_managers_aggregate :
    (OrientationManagersAggregateOptionalArguments -> OrientationManagersAggregateOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Orientation_manager_aggregate
    -> SelectionSet decodesTo CdbGQL.Object.Deployment
orientation_managers_aggregate fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Orientation_manager_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeOrientation_manager_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeOrientation_manager_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "orientation_managers_aggregate" optionalArgs____ object____ Basics.identity


type alias StructuresOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Structure_select_column.Structure_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Structure_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Structure_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
structures :
    (StructuresOptionalArguments -> StructuresOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Structure
    -> SelectionSet (List decodesTo) CdbGQL.Object.Deployment
structures fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Structure_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeStructure_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeStructure_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "structures" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias StructuresAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List CdbGQL.Enum.Structure_select_column.Structure_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List CdbGQL.InputObject.Structure_order_by)
    , where_ : OptionalArgument CdbGQL.InputObject.Structure_bool_exp
    }


{-| An aggregate relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
structures_aggregate :
    (StructuresAggregateOptionalArguments -> StructuresAggregateOptionalArguments)
    -> SelectionSet decodesTo CdbGQL.Object.Structure_aggregate
    -> SelectionSet decodesTo CdbGQL.Object.Deployment
structures_aggregate fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum CdbGQL.Enum.Structure_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (CdbGQL.InputObject.encodeStructure_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ CdbGQL.InputObject.encodeStructure_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "structures_aggregate" optionalArgs____ object____ Basics.identity


updatedAt : SelectionSet CdbGQL.ScalarCodecs.Timestamptz CdbGQL.Object.Deployment
updatedAt =
    Object.selectionForField "ScalarCodecs.Timestamptz" "updatedAt" [] (CdbGQL.ScalarCodecs.codecs |> CdbGQL.Scalar.unwrapCodecs |> .codecTimestamptz |> .decoder)
