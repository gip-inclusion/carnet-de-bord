-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module CdbGQL.Enum.Account_update_column exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| update columns of table "account"

  - AccessKey - column name
  - AccessKeyDate - column name
  - AdminId - column name
  - AdminStructureId - column name
  - BeneficiaryId - column name
  - Confirmed - column name
  - CreatedAt - column name
  - DeletedAt - column name
  - Id - column name
  - LastLogin - column name
  - ManagerId - column name
  - OnboardingDone - column name
  - OrientationManagerId - column name
  - ProfessionalId - column name
  - Type - column name
  - UpdatedAt - column name
  - Username - column name

-}
type Account_update_column
    = AccessKey
    | AccessKeyDate
    | AdminId
    | AdminStructureId
    | BeneficiaryId
    | Confirmed
    | CreatedAt
    | DeletedAt
    | Id
    | LastLogin
    | ManagerId
    | OnboardingDone
    | OrientationManagerId
    | ProfessionalId
    | Type
    | UpdatedAt
    | Username


list : List Account_update_column
list =
    [ AccessKey, AccessKeyDate, AdminId, AdminStructureId, BeneficiaryId, Confirmed, CreatedAt, DeletedAt, Id, LastLogin, ManagerId, OnboardingDone, OrientationManagerId, ProfessionalId, Type, UpdatedAt, Username ]


decoder : Decoder Account_update_column
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "accessKey" ->
                        Decode.succeed AccessKey

                    "accessKeyDate" ->
                        Decode.succeed AccessKeyDate

                    "adminId" ->
                        Decode.succeed AdminId

                    "adminStructureId" ->
                        Decode.succeed AdminStructureId

                    "beneficiaryId" ->
                        Decode.succeed BeneficiaryId

                    "confirmed" ->
                        Decode.succeed Confirmed

                    "createdAt" ->
                        Decode.succeed CreatedAt

                    "deletedAt" ->
                        Decode.succeed DeletedAt

                    "id" ->
                        Decode.succeed Id

                    "lastLogin" ->
                        Decode.succeed LastLogin

                    "managerId" ->
                        Decode.succeed ManagerId

                    "onboardingDone" ->
                        Decode.succeed OnboardingDone

                    "orientationManagerId" ->
                        Decode.succeed OrientationManagerId

                    "professionalId" ->
                        Decode.succeed ProfessionalId

                    "type" ->
                        Decode.succeed Type

                    "updatedAt" ->
                        Decode.succeed UpdatedAt

                    "username" ->
                        Decode.succeed Username

                    _ ->
                        Decode.fail ("Invalid Account_update_column type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Account_update_column -> String
toString enum____ =
    case enum____ of
        AccessKey ->
            "accessKey"

        AccessKeyDate ->
            "accessKeyDate"

        AdminId ->
            "adminId"

        AdminStructureId ->
            "adminStructureId"

        BeneficiaryId ->
            "beneficiaryId"

        Confirmed ->
            "confirmed"

        CreatedAt ->
            "createdAt"

        DeletedAt ->
            "deletedAt"

        Id ->
            "id"

        LastLogin ->
            "lastLogin"

        ManagerId ->
            "managerId"

        OnboardingDone ->
            "onboardingDone"

        OrientationManagerId ->
            "orientationManagerId"

        ProfessionalId ->
            "professionalId"

        Type ->
            "type"

        UpdatedAt ->
            "updatedAt"

        Username ->
            "username"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Account_update_column
fromString enumString____ =
    case enumString____ of
        "accessKey" ->
            Just AccessKey

        "accessKeyDate" ->
            Just AccessKeyDate

        "adminId" ->
            Just AdminId

        "adminStructureId" ->
            Just AdminStructureId

        "beneficiaryId" ->
            Just BeneficiaryId

        "confirmed" ->
            Just Confirmed

        "createdAt" ->
            Just CreatedAt

        "deletedAt" ->
            Just DeletedAt

        "id" ->
            Just Id

        "lastLogin" ->
            Just LastLogin

        "managerId" ->
            Just ManagerId

        "onboardingDone" ->
            Just OnboardingDone

        "orientationManagerId" ->
            Just OrientationManagerId

        "professionalId" ->
            Just ProfessionalId

        "type" ->
            Just Type

        "updatedAt" ->
            Just UpdatedAt

        "username" ->
            Just Username

        _ ->
            Nothing
