-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module CdbGQL.Enum.Notebook_update_column exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| update columns of table "notebook"

  - BeneficiaryId - column name
  - ContractEndDate - column name
  - ContractSignDate - column name
  - ContractStartDate - column name
  - ContractType - column name
  - CreatedAt - column name
  - EducationLevel - column name
  - Id - column name
  - LastJobEndedAt - column name
  - RightRqth - column name
  - UpdatedAt - column name
  - WorkSituation - column name
  - WorkSituationDate - column name
  - WorkSituationEndDate - column name

-}
type Notebook_update_column
    = BeneficiaryId
    | ContractEndDate
    | ContractSignDate
    | ContractStartDate
    | ContractType
    | CreatedAt
    | EducationLevel
    | Id
    | LastJobEndedAt
    | RightRqth
    | UpdatedAt
    | WorkSituation
    | WorkSituationDate
    | WorkSituationEndDate


list : List Notebook_update_column
list =
    [ BeneficiaryId, ContractEndDate, ContractSignDate, ContractStartDate, ContractType, CreatedAt, EducationLevel, Id, LastJobEndedAt, RightRqth, UpdatedAt, WorkSituation, WorkSituationDate, WorkSituationEndDate ]


decoder : Decoder Notebook_update_column
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "beneficiaryId" ->
                        Decode.succeed BeneficiaryId

                    "contractEndDate" ->
                        Decode.succeed ContractEndDate

                    "contractSignDate" ->
                        Decode.succeed ContractSignDate

                    "contractStartDate" ->
                        Decode.succeed ContractStartDate

                    "contractType" ->
                        Decode.succeed ContractType

                    "createdAt" ->
                        Decode.succeed CreatedAt

                    "educationLevel" ->
                        Decode.succeed EducationLevel

                    "id" ->
                        Decode.succeed Id

                    "lastJobEndedAt" ->
                        Decode.succeed LastJobEndedAt

                    "rightRqth" ->
                        Decode.succeed RightRqth

                    "updatedAt" ->
                        Decode.succeed UpdatedAt

                    "workSituation" ->
                        Decode.succeed WorkSituation

                    "workSituationDate" ->
                        Decode.succeed WorkSituationDate

                    "workSituationEndDate" ->
                        Decode.succeed WorkSituationEndDate

                    _ ->
                        Decode.fail ("Invalid Notebook_update_column type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Notebook_update_column -> String
toString enum____ =
    case enum____ of
        BeneficiaryId ->
            "beneficiaryId"

        ContractEndDate ->
            "contractEndDate"

        ContractSignDate ->
            "contractSignDate"

        ContractStartDate ->
            "contractStartDate"

        ContractType ->
            "contractType"

        CreatedAt ->
            "createdAt"

        EducationLevel ->
            "educationLevel"

        Id ->
            "id"

        LastJobEndedAt ->
            "lastJobEndedAt"

        RightRqth ->
            "rightRqth"

        UpdatedAt ->
            "updatedAt"

        WorkSituation ->
            "workSituation"

        WorkSituationDate ->
            "workSituationDate"

        WorkSituationEndDate ->
            "workSituationEndDate"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Notebook_update_column
fromString enumString____ =
    case enumString____ of
        "beneficiaryId" ->
            Just BeneficiaryId

        "contractEndDate" ->
            Just ContractEndDate

        "contractSignDate" ->
            Just ContractSignDate

        "contractStartDate" ->
            Just ContractStartDate

        "contractType" ->
            Just ContractType

        "createdAt" ->
            Just CreatedAt

        "educationLevel" ->
            Just EducationLevel

        "id" ->
            Just Id

        "lastJobEndedAt" ->
            Just LastJobEndedAt

        "rightRqth" ->
            Just RightRqth

        "updatedAt" ->
            Just UpdatedAt

        "workSituation" ->
            Just WorkSituation

        "workSituationDate" ->
            Just WorkSituationDate

        "workSituationEndDate" ->
            Just WorkSituationEndDate

        _ ->
            Nothing
