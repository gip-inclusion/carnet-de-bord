-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module CdbGQL.Enum.Notebook_event_update_column exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| update columns of table "notebook\_event"

  - CreationDate - column name
  - CreatorId - column name
  - Event - column name
  - EventDate - column name
  - EventType - column name
  - Id - column name
  - NotebookId - column name

-}
type Notebook_event_update_column
    = CreationDate
    | CreatorId
    | Event
    | EventDate
    | EventType
    | Id
    | NotebookId


list : List Notebook_event_update_column
list =
    [ CreationDate, CreatorId, Event, EventDate, EventType, Id, NotebookId ]


decoder : Decoder Notebook_event_update_column
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "creationDate" ->
                        Decode.succeed CreationDate

                    "creatorId" ->
                        Decode.succeed CreatorId

                    "event" ->
                        Decode.succeed Event

                    "eventDate" ->
                        Decode.succeed EventDate

                    "eventType" ->
                        Decode.succeed EventType

                    "id" ->
                        Decode.succeed Id

                    "notebookId" ->
                        Decode.succeed NotebookId

                    _ ->
                        Decode.fail ("Invalid Notebook_event_update_column type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Notebook_event_update_column -> String
toString enum____ =
    case enum____ of
        CreationDate ->
            "creationDate"

        CreatorId ->
            "creatorId"

        Event ->
            "event"

        EventDate ->
            "eventDate"

        EventType ->
            "eventType"

        Id ->
            "id"

        NotebookId ->
            "notebookId"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Notebook_event_update_column
fromString enumString____ =
    case enumString____ of
        "creationDate" ->
            Just CreationDate

        "creatorId" ->
            Just CreatorId

        "event" ->
            Just Event

        "eventDate" ->
            Just EventDate

        "eventType" ->
            Just EventType

        "id" ->
            Just Id

        "notebookId" ->
            Just NotebookId

        _ ->
            Nothing
