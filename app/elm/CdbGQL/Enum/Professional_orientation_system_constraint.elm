-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module CdbGQL.Enum.Professional_orientation_system_constraint exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| unique or primary key constraints on table "professional\_orientation\_system"

  - Professional\_orientation\_system\_pkey - unique or primary key constraint on columns "id"
  - Professional\_orientation\_system\_professional\_id\_orientation\_sys - unique or primary key constraint on columns "orientation\_system\_id", "professional\_id"

-}
type Professional_orientation_system_constraint
    = Professional_orientation_system_pkey
    | Professional_orientation_system_professional_id_orientation_sys


list : List Professional_orientation_system_constraint
list =
    [ Professional_orientation_system_pkey, Professional_orientation_system_professional_id_orientation_sys ]


decoder : Decoder Professional_orientation_system_constraint
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "professional_orientation_system_pkey" ->
                        Decode.succeed Professional_orientation_system_pkey

                    "professional_orientation_system_professional_id_orientation_sys" ->
                        Decode.succeed Professional_orientation_system_professional_id_orientation_sys

                    _ ->
                        Decode.fail ("Invalid Professional_orientation_system_constraint type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Professional_orientation_system_constraint -> String
toString enum____ =
    case enum____ of
        Professional_orientation_system_pkey ->
            "professional_orientation_system_pkey"

        Professional_orientation_system_professional_id_orientation_sys ->
            "professional_orientation_system_professional_id_orientation_sys"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Professional_orientation_system_constraint
fromString enumString____ =
    case enumString____ of
        "professional_orientation_system_pkey" ->
            Just Professional_orientation_system_pkey

        "professional_orientation_system_professional_id_orientation_sys" ->
            Just Professional_orientation_system_professional_id_orientation_sys

        _ ->
            Nothing
