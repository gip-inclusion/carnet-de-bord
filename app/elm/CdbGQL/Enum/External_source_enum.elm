-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module CdbGQL.Enum.External_source_enum exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-|

  - Cafmsa - Flux caf / msa
  - Pe - PÃ´le Emploi

-}
type External_source_enum
    = Cafmsa
    | Pe


list : List External_source_enum
list =
    [ Cafmsa, Pe ]


decoder : Decoder External_source_enum
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "cafmsa" ->
                        Decode.succeed Cafmsa

                    "pe" ->
                        Decode.succeed Pe

                    _ ->
                        Decode.fail ("Invalid External_source_enum type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : External_source_enum -> String
toString enum____ =
    case enum____ of
        Cafmsa ->
            "cafmsa"

        Pe ->
            "pe"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe External_source_enum
fromString enumString____ =
    case enumString____ of
        "cafmsa" ->
            Just Cafmsa

        "pe" ->
            Just Pe

        _ ->
            Nothing
