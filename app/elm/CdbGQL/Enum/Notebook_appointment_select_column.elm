-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module CdbGQL.Enum.Notebook_appointment_select_column exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| select columns of table "notebook\_appointment"

  - Created\_at - column name
  - Date - column name
  - Deleted\_at - column name
  - Deleted\_by - column name
  - Id - column name
  - MemberAccountId - column name
  - NotebookId - column name
  - Status - column name
  - Updated\_at - column name

-}
type Notebook_appointment_select_column
    = Created_at
    | Date
    | Deleted_at
    | Deleted_by
    | Id
    | MemberAccountId
    | NotebookId
    | Status
    | Updated_at


list : List Notebook_appointment_select_column
list =
    [ Created_at, Date, Deleted_at, Deleted_by, Id, MemberAccountId, NotebookId, Status, Updated_at ]


decoder : Decoder Notebook_appointment_select_column
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "created_at" ->
                        Decode.succeed Created_at

                    "date" ->
                        Decode.succeed Date

                    "deleted_at" ->
                        Decode.succeed Deleted_at

                    "deleted_by" ->
                        Decode.succeed Deleted_by

                    "id" ->
                        Decode.succeed Id

                    "memberAccountId" ->
                        Decode.succeed MemberAccountId

                    "notebookId" ->
                        Decode.succeed NotebookId

                    "status" ->
                        Decode.succeed Status

                    "updated_at" ->
                        Decode.succeed Updated_at

                    _ ->
                        Decode.fail ("Invalid Notebook_appointment_select_column type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Notebook_appointment_select_column -> String
toString enum____ =
    case enum____ of
        Created_at ->
            "created_at"

        Date ->
            "date"

        Deleted_at ->
            "deleted_at"

        Deleted_by ->
            "deleted_by"

        Id ->
            "id"

        MemberAccountId ->
            "memberAccountId"

        NotebookId ->
            "notebookId"

        Status ->
            "status"

        Updated_at ->
            "updated_at"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Notebook_appointment_select_column
fromString enumString____ =
    case enumString____ of
        "created_at" ->
            Just Created_at

        "date" ->
            Just Date

        "deleted_at" ->
            Just Deleted_at

        "deleted_by" ->
            Just Deleted_by

        "id" ->
            Just Id

        "memberAccountId" ->
            Just MemberAccountId

        "notebookId" ->
            Just NotebookId

        "status" ->
            Just Status

        "updated_at" ->
            Just Updated_at

        _ ->
            Nothing
