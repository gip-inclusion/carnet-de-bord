-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module CdbGQL.Enum.Notebook_event_type_enum exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-|

  - Action - Action d'un objectif
  - Target - Objectif d'un parcours

-}
type Notebook_event_type_enum
    = Action
    | Target


list : List Notebook_event_type_enum
list =
    [ Action, Target ]


decoder : Decoder Notebook_event_type_enum
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "action" ->
                        Decode.succeed Action

                    "target" ->
                        Decode.succeed Target

                    _ ->
                        Decode.fail ("Invalid Notebook_event_type_enum type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Notebook_event_type_enum -> String
toString enum____ =
    case enum____ of
        Action ->
            "action"

        Target ->
            "target"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Notebook_event_type_enum
fromString enumString____ =
    case enumString____ of
        "action" ->
            Just Action

        "target" ->
            Just Target

        _ ->
            Nothing
