-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module CdbGQL.Enum.Beneficiary_constraint exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| unique or primary key constraints on table "beneficiary"

  - Beneficiary\_deployment\_id\_internal\_id\_key - unique or primary key constraint on columns "deployment\_id", "internal\_id"
  - Beneficiary\_nir\_key - unique or primary key constraint on columns "nir"
  - Beneficiary\_pkey - unique or primary key constraint on columns "id"
  - Firstname\_lastname\_date\_of\_birth\_unique\_idx - unique or primary key constraint on columns "date\_of\_birth", "deployment\_id"

-}
type Beneficiary_constraint
    = Beneficiary_deployment_id_internal_id_key
    | Beneficiary_nir_key
    | Beneficiary_pkey
    | Firstname_lastname_date_of_birth_unique_idx


list : List Beneficiary_constraint
list =
    [ Beneficiary_deployment_id_internal_id_key, Beneficiary_nir_key, Beneficiary_pkey, Firstname_lastname_date_of_birth_unique_idx ]


decoder : Decoder Beneficiary_constraint
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "beneficiary_deployment_id_internal_id_key" ->
                        Decode.succeed Beneficiary_deployment_id_internal_id_key

                    "beneficiary_nir_key" ->
                        Decode.succeed Beneficiary_nir_key

                    "beneficiary_pkey" ->
                        Decode.succeed Beneficiary_pkey

                    "firstname_lastname_date_of_birth_unique_idx" ->
                        Decode.succeed Firstname_lastname_date_of_birth_unique_idx

                    _ ->
                        Decode.fail ("Invalid Beneficiary_constraint type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Beneficiary_constraint -> String
toString enum____ =
    case enum____ of
        Beneficiary_deployment_id_internal_id_key ->
            "beneficiary_deployment_id_internal_id_key"

        Beneficiary_nir_key ->
            "beneficiary_nir_key"

        Beneficiary_pkey ->
            "beneficiary_pkey"

        Firstname_lastname_date_of_birth_unique_idx ->
            "firstname_lastname_date_of_birth_unique_idx"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Beneficiary_constraint
fromString enumString____ =
    case enumString____ of
        "beneficiary_deployment_id_internal_id_key" ->
            Just Beneficiary_deployment_id_internal_id_key

        "beneficiary_nir_key" ->
            Just Beneficiary_nir_key

        "beneficiary_pkey" ->
            Just Beneficiary_pkey

        "firstname_lastname_date_of_birth_unique_idx" ->
            Just Firstname_lastname_date_of_birth_unique_idx

        _ ->
            Nothing
