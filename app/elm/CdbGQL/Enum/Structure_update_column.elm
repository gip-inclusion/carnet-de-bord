-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module CdbGQL.Enum.Structure_update_column exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| update columns of table "structure"

  - Address1 - column name
  - Address2 - column name
  - City - column name
  - CreatedAt - column name
  - DeploymentId - column name
  - Email - column name
  - Id - column name
  - Name - column name
  - Phone - column name
  - PostalCode - column name
  - ShortDesc - column name
  - Siret - column name
  - UpdatedAt - column name
  - Website - column name

-}
type Structure_update_column
    = Address1
    | Address2
    | City
    | CreatedAt
    | DeploymentId
    | Email
    | Id
    | Name
    | Phone
    | PostalCode
    | ShortDesc
    | Siret
    | UpdatedAt
    | Website


list : List Structure_update_column
list =
    [ Address1, Address2, City, CreatedAt, DeploymentId, Email, Id, Name, Phone, PostalCode, ShortDesc, Siret, UpdatedAt, Website ]


decoder : Decoder Structure_update_column
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "address1" ->
                        Decode.succeed Address1

                    "address2" ->
                        Decode.succeed Address2

                    "city" ->
                        Decode.succeed City

                    "createdAt" ->
                        Decode.succeed CreatedAt

                    "deploymentId" ->
                        Decode.succeed DeploymentId

                    "email" ->
                        Decode.succeed Email

                    "id" ->
                        Decode.succeed Id

                    "name" ->
                        Decode.succeed Name

                    "phone" ->
                        Decode.succeed Phone

                    "postalCode" ->
                        Decode.succeed PostalCode

                    "shortDesc" ->
                        Decode.succeed ShortDesc

                    "siret" ->
                        Decode.succeed Siret

                    "updatedAt" ->
                        Decode.succeed UpdatedAt

                    "website" ->
                        Decode.succeed Website

                    _ ->
                        Decode.fail ("Invalid Structure_update_column type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Structure_update_column -> String
toString enum____ =
    case enum____ of
        Address1 ->
            "address1"

        Address2 ->
            "address2"

        City ->
            "city"

        CreatedAt ->
            "createdAt"

        DeploymentId ->
            "deploymentId"

        Email ->
            "email"

        Id ->
            "id"

        Name ->
            "name"

        Phone ->
            "phone"

        PostalCode ->
            "postalCode"

        ShortDesc ->
            "shortDesc"

        Siret ->
            "siret"

        UpdatedAt ->
            "updatedAt"

        Website ->
            "website"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Structure_update_column
fromString enumString____ =
    case enumString____ of
        "address1" ->
            Just Address1

        "address2" ->
            Just Address2

        "city" ->
            Just City

        "createdAt" ->
            Just CreatedAt

        "deploymentId" ->
            Just DeploymentId

        "email" ->
            Just Email

        "id" ->
            Just Id

        "name" ->
            Just Name

        "phone" ->
            Just Phone

        "postalCode" ->
            Just PostalCode

        "shortDesc" ->
            Just ShortDesc

        "siret" ->
            Just Siret

        "updatedAt" ->
            Just UpdatedAt

        "website" ->
            Just Website

        _ ->
            Nothing
