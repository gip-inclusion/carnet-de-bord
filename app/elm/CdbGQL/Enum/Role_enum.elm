-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module CdbGQL.Enum.Role_enum exposing (..)

import Json.Decode as Decode exposing (Decoder)


type Role_enum
    = Admin_cdb
    | Admin_structure
    | Beneficiary
    | Manager
    | Orientation_manager
    | Professional


list : List Role_enum
list =
    [ Admin_cdb, Admin_structure, Beneficiary, Manager, Orientation_manager, Professional ]


decoder : Decoder Role_enum
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "admin_cdb" ->
                        Decode.succeed Admin_cdb

                    "admin_structure" ->
                        Decode.succeed Admin_structure

                    "beneficiary" ->
                        Decode.succeed Beneficiary

                    "manager" ->
                        Decode.succeed Manager

                    "orientation_manager" ->
                        Decode.succeed Orientation_manager

                    "professional" ->
                        Decode.succeed Professional

                    _ ->
                        Decode.fail ("Invalid Role_enum type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Role_enum -> String
toString enum____ =
    case enum____ of
        Admin_cdb ->
            "admin_cdb"

        Admin_structure ->
            "admin_structure"

        Beneficiary ->
            "beneficiary"

        Manager ->
            "manager"

        Orientation_manager ->
            "orientation_manager"

        Professional ->
            "professional"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Role_enum
fromString enumString____ =
    case enumString____ of
        "admin_cdb" ->
            Just Admin_cdb

        "admin_structure" ->
            Just Admin_structure

        "beneficiary" ->
            Just Beneficiary

        "manager" ->
            Just Manager

        "orientation_manager" ->
            Just Orientation_manager

        "professional" ->
            Just Professional

        _ ->
            Nothing
