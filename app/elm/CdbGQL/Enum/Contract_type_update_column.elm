-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module CdbGQL.Enum.Contract_type_update_column exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| update columns of table "contract\_type"

  - Id - column name
  - Label - column name

-}
type Contract_type_update_column
    = Id
    | Label


list : List Contract_type_update_column
list =
    [ Id, Label ]


decoder : Decoder Contract_type_update_column
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "id" ->
                        Decode.succeed Id

                    "label" ->
                        Decode.succeed Label

                    _ ->
                        Decode.fail ("Invalid Contract_type_update_column type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Contract_type_update_column -> String
toString enum____ =
    case enum____ of
        Id ->
            "id"

        Label ->
            "label"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Contract_type_update_column
fromString enumString____ =
    case enumString____ of
        "id" ->
            Just Id

        "label" ->
            Just Label

        _ ->
            Nothing
