-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module CdbGQL.Enum.Beneficiary_update_column exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| update columns of table "beneficiary"

  - Address1 - column name
  - Address2 - column name
  - CafNumber - column name
  - City - column name
  - CreatedAt - column name
  - DateOfBirth - column name
  - DeploymentId - column name
  - Email - column name
  - Firstname - column name
  - Id - column name
  - InternalId - column name
  - IsHomeless - column name
  - Lastname - column name
  - MobileNumber - column name
  - Nir - column name
  - PeNumber - column name
  - PeUniqueId - column name
  - PlaceOfBirth - column name
  - PostalCode - column name
  - RightAre - column name
  - RightAss - column name
  - RightBonus - column name
  - RightRsa - column name
  - RsaClosureDate - column name
  - RsaClosureReason - column name
  - RsaSuspensionReason - column name
  - SubjectToRightAndDuty - column name
  - UpdatedAt - column name

-}
type Beneficiary_update_column
    = Address1
    | Address2
    | CafNumber
    | City
    | CreatedAt
    | DateOfBirth
    | DeploymentId
    | Email
    | Firstname
    | Id
    | InternalId
    | IsHomeless
    | Lastname
    | MobileNumber
    | Nir
    | PeNumber
    | PeUniqueId
    | PlaceOfBirth
    | PostalCode
    | RightAre
    | RightAss
    | RightBonus
    | RightRsa
    | RsaClosureDate
    | RsaClosureReason
    | RsaSuspensionReason
    | SubjectToRightAndDuty
    | UpdatedAt


list : List Beneficiary_update_column
list =
    [ Address1, Address2, CafNumber, City, CreatedAt, DateOfBirth, DeploymentId, Email, Firstname, Id, InternalId, IsHomeless, Lastname, MobileNumber, Nir, PeNumber, PeUniqueId, PlaceOfBirth, PostalCode, RightAre, RightAss, RightBonus, RightRsa, RsaClosureDate, RsaClosureReason, RsaSuspensionReason, SubjectToRightAndDuty, UpdatedAt ]


decoder : Decoder Beneficiary_update_column
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "address1" ->
                        Decode.succeed Address1

                    "address2" ->
                        Decode.succeed Address2

                    "cafNumber" ->
                        Decode.succeed CafNumber

                    "city" ->
                        Decode.succeed City

                    "createdAt" ->
                        Decode.succeed CreatedAt

                    "dateOfBirth" ->
                        Decode.succeed DateOfBirth

                    "deploymentId" ->
                        Decode.succeed DeploymentId

                    "email" ->
                        Decode.succeed Email

                    "firstname" ->
                        Decode.succeed Firstname

                    "id" ->
                        Decode.succeed Id

                    "internalId" ->
                        Decode.succeed InternalId

                    "isHomeless" ->
                        Decode.succeed IsHomeless

                    "lastname" ->
                        Decode.succeed Lastname

                    "mobileNumber" ->
                        Decode.succeed MobileNumber

                    "nir" ->
                        Decode.succeed Nir

                    "peNumber" ->
                        Decode.succeed PeNumber

                    "peUniqueId" ->
                        Decode.succeed PeUniqueId

                    "placeOfBirth" ->
                        Decode.succeed PlaceOfBirth

                    "postalCode" ->
                        Decode.succeed PostalCode

                    "rightAre" ->
                        Decode.succeed RightAre

                    "rightAss" ->
                        Decode.succeed RightAss

                    "rightBonus" ->
                        Decode.succeed RightBonus

                    "rightRsa" ->
                        Decode.succeed RightRsa

                    "rsaClosureDate" ->
                        Decode.succeed RsaClosureDate

                    "rsaClosureReason" ->
                        Decode.succeed RsaClosureReason

                    "rsaSuspensionReason" ->
                        Decode.succeed RsaSuspensionReason

                    "subjectToRightAndDuty" ->
                        Decode.succeed SubjectToRightAndDuty

                    "updatedAt" ->
                        Decode.succeed UpdatedAt

                    _ ->
                        Decode.fail ("Invalid Beneficiary_update_column type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Beneficiary_update_column -> String
toString enum____ =
    case enum____ of
        Address1 ->
            "address1"

        Address2 ->
            "address2"

        CafNumber ->
            "cafNumber"

        City ->
            "city"

        CreatedAt ->
            "createdAt"

        DateOfBirth ->
            "dateOfBirth"

        DeploymentId ->
            "deploymentId"

        Email ->
            "email"

        Firstname ->
            "firstname"

        Id ->
            "id"

        InternalId ->
            "internalId"

        IsHomeless ->
            "isHomeless"

        Lastname ->
            "lastname"

        MobileNumber ->
            "mobileNumber"

        Nir ->
            "nir"

        PeNumber ->
            "peNumber"

        PeUniqueId ->
            "peUniqueId"

        PlaceOfBirth ->
            "placeOfBirth"

        PostalCode ->
            "postalCode"

        RightAre ->
            "rightAre"

        RightAss ->
            "rightAss"

        RightBonus ->
            "rightBonus"

        RightRsa ->
            "rightRsa"

        RsaClosureDate ->
            "rsaClosureDate"

        RsaClosureReason ->
            "rsaClosureReason"

        RsaSuspensionReason ->
            "rsaSuspensionReason"

        SubjectToRightAndDuty ->
            "subjectToRightAndDuty"

        UpdatedAt ->
            "updatedAt"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Beneficiary_update_column
fromString enumString____ =
    case enumString____ of
        "address1" ->
            Just Address1

        "address2" ->
            Just Address2

        "cafNumber" ->
            Just CafNumber

        "city" ->
            Just City

        "createdAt" ->
            Just CreatedAt

        "dateOfBirth" ->
            Just DateOfBirth

        "deploymentId" ->
            Just DeploymentId

        "email" ->
            Just Email

        "firstname" ->
            Just Firstname

        "id" ->
            Just Id

        "internalId" ->
            Just InternalId

        "isHomeless" ->
            Just IsHomeless

        "lastname" ->
            Just Lastname

        "mobileNumber" ->
            Just MobileNumber

        "nir" ->
            Just Nir

        "peNumber" ->
            Just PeNumber

        "peUniqueId" ->
            Just PeUniqueId

        "placeOfBirth" ->
            Just PlaceOfBirth

        "postalCode" ->
            Just PostalCode

        "rightAre" ->
            Just RightAre

        "rightAss" ->
            Just RightAss

        "rightBonus" ->
            Just RightBonus

        "rightRsa" ->
            Just RightRsa

        "rsaClosureDate" ->
            Just RsaClosureDate

        "rsaClosureReason" ->
            Just RsaClosureReason

        "rsaSuspensionReason" ->
            Just RsaSuspensionReason

        "subjectToRightAndDuty" ->
            Just SubjectToRightAndDuty

        "updatedAt" ->
            Just UpdatedAt

        _ ->
            Nothing
