-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module CdbGQL.Enum.Orientation_type_enum exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-|

  - Pro - Professionnel
  - Social - Social
  - Sociopro - Socio-professionnel

-}
type Orientation_type_enum
    = Pro
    | Social
    | Sociopro


list : List Orientation_type_enum
list =
    [ Pro, Social, Sociopro ]


decoder : Decoder Orientation_type_enum
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "pro" ->
                        Decode.succeed Pro

                    "social" ->
                        Decode.succeed Social

                    "sociopro" ->
                        Decode.succeed Sociopro

                    _ ->
                        Decode.fail ("Invalid Orientation_type_enum type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Orientation_type_enum -> String
toString enum____ =
    case enum____ of
        Pro ->
            "pro"

        Social ->
            "social"

        Sociopro ->
            "sociopro"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Orientation_type_enum
fromString enumString____ =
    case enumString____ of
        "pro" ->
            Just Pro

        "social" ->
            Just Social

        "sociopro" ->
            Just Sociopro

        _ ->
            Nothing
