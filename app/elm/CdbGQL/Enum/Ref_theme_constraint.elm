-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module CdbGQL.Enum.Ref_theme_constraint exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| unique or primary key constraints on table "ref\_theme"

  - Ref\_theme\_pkey - unique or primary key constraint on columns "name"

-}
type Ref_theme_constraint
    = Ref_theme_pkey


list : List Ref_theme_constraint
list =
    [ Ref_theme_pkey ]


decoder : Decoder Ref_theme_constraint
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "ref_theme_pkey" ->
                        Decode.succeed Ref_theme_pkey

                    _ ->
                        Decode.fail ("Invalid Ref_theme_constraint type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Ref_theme_constraint -> String
toString enum____ =
    case enum____ of
        Ref_theme_pkey ->
            "ref_theme_pkey"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Ref_theme_constraint
fromString enumString____ =
    case enumString____ of
        "ref_theme_pkey" ->
            Just Ref_theme_pkey

        _ ->
            Nothing
