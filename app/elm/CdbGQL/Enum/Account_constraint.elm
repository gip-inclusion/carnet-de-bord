-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module CdbGQL.Enum.Account_constraint exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| unique or primary key constraints on table "account"

  - Account\_admin\_id\_key - unique or primary key constraint on columns "admin\_id"
  - Account\_admin\_structure\_id\_key - unique or primary key constraint on columns "admin\_structure\_id"
  - Account\_beneficiary\_id\_key - unique or primary key constraint on columns "beneficiary\_id"
  - Account\_manager\_id\_key - unique or primary key constraint on columns "manager\_id"
  - Account\_pkey - unique or primary key constraint on columns "id"
  - Account\_professional\_id\_key - unique or primary key constraint on columns "professional\_id"
  - Account\_username\_unique - unique or primary key constraint on columns "username"

-}
type Account_constraint
    = Account_admin_id_key
    | Account_admin_structure_id_key
    | Account_beneficiary_id_key
    | Account_manager_id_key
    | Account_pkey
    | Account_professional_id_key
    | Account_username_unique


list : List Account_constraint
list =
    [ Account_admin_id_key, Account_admin_structure_id_key, Account_beneficiary_id_key, Account_manager_id_key, Account_pkey, Account_professional_id_key, Account_username_unique ]


decoder : Decoder Account_constraint
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "account_admin_id_key" ->
                        Decode.succeed Account_admin_id_key

                    "account_admin_structure_id_key" ->
                        Decode.succeed Account_admin_structure_id_key

                    "account_beneficiary_id_key" ->
                        Decode.succeed Account_beneficiary_id_key

                    "account_manager_id_key" ->
                        Decode.succeed Account_manager_id_key

                    "account_pkey" ->
                        Decode.succeed Account_pkey

                    "account_professional_id_key" ->
                        Decode.succeed Account_professional_id_key

                    "account_username_unique" ->
                        Decode.succeed Account_username_unique

                    _ ->
                        Decode.fail ("Invalid Account_constraint type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Account_constraint -> String
toString enum____ =
    case enum____ of
        Account_admin_id_key ->
            "account_admin_id_key"

        Account_admin_structure_id_key ->
            "account_admin_structure_id_key"

        Account_beneficiary_id_key ->
            "account_beneficiary_id_key"

        Account_manager_id_key ->
            "account_manager_id_key"

        Account_pkey ->
            "account_pkey"

        Account_professional_id_key ->
            "account_professional_id_key"

        Account_username_unique ->
            "account_username_unique"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Account_constraint
fromString enumString____ =
    case enumString____ of
        "account_admin_id_key" ->
            Just Account_admin_id_key

        "account_admin_structure_id_key" ->
            Just Account_admin_structure_id_key

        "account_beneficiary_id_key" ->
            Just Account_beneficiary_id_key

        "account_manager_id_key" ->
            Just Account_manager_id_key

        "account_pkey" ->
            Just Account_pkey

        "account_professional_id_key" ->
            Just Account_professional_id_key

        "account_username_unique" ->
            Just Account_username_unique

        _ ->
            Nothing
