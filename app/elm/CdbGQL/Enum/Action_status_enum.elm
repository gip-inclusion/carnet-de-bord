-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module CdbGQL.Enum.Action_status_enum exposing (..)

import Json.Decode as Decode exposing (Decoder)


type Action_status_enum
    = Abandonned
    | Canceled
    | Done
    | In_progress
    | Planned
    | Standby


list : List Action_status_enum
list =
    [ Abandonned, Canceled, Done, In_progress, Planned, Standby ]


decoder : Decoder Action_status_enum
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "abandonned" ->
                        Decode.succeed Abandonned

                    "canceled" ->
                        Decode.succeed Canceled

                    "done" ->
                        Decode.succeed Done

                    "in_progress" ->
                        Decode.succeed In_progress

                    "planned" ->
                        Decode.succeed Planned

                    "standby" ->
                        Decode.succeed Standby

                    _ ->
                        Decode.fail ("Invalid Action_status_enum type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Action_status_enum -> String
toString enum____ =
    case enum____ of
        Abandonned ->
            "abandonned"

        Canceled ->
            "canceled"

        Done ->
            "done"

        In_progress ->
            "in_progress"

        Planned ->
            "planned"

        Standby ->
            "standby"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Action_status_enum
fromString enumString____ =
    case enumString____ of
        "abandonned" ->
            Just Abandonned

        "canceled" ->
            Just Canceled

        "done" ->
            Just Done

        "in_progress" ->
            Just In_progress

        "planned" ->
            Just Planned

        "standby" ->
            Just Standby

        _ ->
            Nothing
