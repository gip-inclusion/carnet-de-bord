-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module CdbGQL.Enum.Notebook_focus_update_column exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| update columns of table "notebook\_focus"

  - CreatedAt - column name
  - CreatorId - column name
  - Id - column name
  - LinkedTo - column name
  - NotebookId - column name
  - Theme - column name
  - UpdatedAt - column name

-}
type Notebook_focus_update_column
    = CreatedAt
    | CreatorId
    | Id
    | LinkedTo
    | NotebookId
    | Theme
    | UpdatedAt


list : List Notebook_focus_update_column
list =
    [ CreatedAt, CreatorId, Id, LinkedTo, NotebookId, Theme, UpdatedAt ]


decoder : Decoder Notebook_focus_update_column
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "createdAt" ->
                        Decode.succeed CreatedAt

                    "creatorId" ->
                        Decode.succeed CreatorId

                    "id" ->
                        Decode.succeed Id

                    "linkedTo" ->
                        Decode.succeed LinkedTo

                    "notebookId" ->
                        Decode.succeed NotebookId

                    "theme" ->
                        Decode.succeed Theme

                    "updatedAt" ->
                        Decode.succeed UpdatedAt

                    _ ->
                        Decode.fail ("Invalid Notebook_focus_update_column type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Notebook_focus_update_column -> String
toString enum____ =
    case enum____ of
        CreatedAt ->
            "createdAt"

        CreatorId ->
            "creatorId"

        Id ->
            "id"

        LinkedTo ->
            "linkedTo"

        NotebookId ->
            "notebookId"

        Theme ->
            "theme"

        UpdatedAt ->
            "updatedAt"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Notebook_focus_update_column
fromString enumString____ =
    case enumString____ of
        "createdAt" ->
            Just CreatedAt

        "creatorId" ->
            Just CreatorId

        "id" ->
            Just Id

        "linkedTo" ->
            Just LinkedTo

        "notebookId" ->
            Just NotebookId

        "theme" ->
            Just Theme

        "updatedAt" ->
            Just UpdatedAt

        _ ->
            Nothing
