-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module CdbGQL.Enum.Notebook_action_select_column exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| select columns of table "notebook\_action"

  - Action - column name
  - CreatedAt - column name
  - CreatorId - column name
  - Id - column name
  - StartingAt - column name
  - Status - column name
  - TargetId - column name
  - UpdatedAt - column name

-}
type Notebook_action_select_column
    = Action
    | CreatedAt
    | CreatorId
    | Id
    | StartingAt
    | Status
    | TargetId
    | UpdatedAt


list : List Notebook_action_select_column
list =
    [ Action, CreatedAt, CreatorId, Id, StartingAt, Status, TargetId, UpdatedAt ]


decoder : Decoder Notebook_action_select_column
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "action" ->
                        Decode.succeed Action

                    "createdAt" ->
                        Decode.succeed CreatedAt

                    "creatorId" ->
                        Decode.succeed CreatorId

                    "id" ->
                        Decode.succeed Id

                    "startingAt" ->
                        Decode.succeed StartingAt

                    "status" ->
                        Decode.succeed Status

                    "targetId" ->
                        Decode.succeed TargetId

                    "updatedAt" ->
                        Decode.succeed UpdatedAt

                    _ ->
                        Decode.fail ("Invalid Notebook_action_select_column type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Notebook_action_select_column -> String
toString enum____ =
    case enum____ of
        Action ->
            "action"

        CreatedAt ->
            "createdAt"

        CreatorId ->
            "creatorId"

        Id ->
            "id"

        StartingAt ->
            "startingAt"

        Status ->
            "status"

        TargetId ->
            "targetId"

        UpdatedAt ->
            "updatedAt"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Notebook_action_select_column
fromString enumString____ =
    case enumString____ of
        "action" ->
            Just Action

        "createdAt" ->
            Just CreatedAt

        "creatorId" ->
            Just CreatorId

        "id" ->
            Just Id

        "startingAt" ->
            Just StartingAt

        "status" ->
            Just Status

        "targetId" ->
            Just TargetId

        "updatedAt" ->
            Just UpdatedAt

        _ ->
            Nothing
