-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module CdbGQL.Enum.Deployment_update_column exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| update columns of table "deployment"

  - Config - column name
  - CreatedAt - column name
  - DepartmentCode - column name
  - Id - column name
  - Label - column name
  - UpdatedAt - column name

-}
type Deployment_update_column
    = Config
    | CreatedAt
    | DepartmentCode
    | Id
    | Label
    | UpdatedAt


list : List Deployment_update_column
list =
    [ Config, CreatedAt, DepartmentCode, Id, Label, UpdatedAt ]


decoder : Decoder Deployment_update_column
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "config" ->
                        Decode.succeed Config

                    "createdAt" ->
                        Decode.succeed CreatedAt

                    "departmentCode" ->
                        Decode.succeed DepartmentCode

                    "id" ->
                        Decode.succeed Id

                    "label" ->
                        Decode.succeed Label

                    "updatedAt" ->
                        Decode.succeed UpdatedAt

                    _ ->
                        Decode.fail ("Invalid Deployment_update_column type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Deployment_update_column -> String
toString enum____ =
    case enum____ of
        Config ->
            "config"

        CreatedAt ->
            "createdAt"

        DepartmentCode ->
            "departmentCode"

        Id ->
            "id"

        Label ->
            "label"

        UpdatedAt ->
            "updatedAt"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Deployment_update_column
fromString enumString____ =
    case enumString____ of
        "config" ->
            Just Config

        "createdAt" ->
            Just CreatedAt

        "departmentCode" ->
            Just DepartmentCode

        "id" ->
            Just Id

        "label" ->
            Just Label

        "updatedAt" ->
            Just UpdatedAt

        _ ->
            Nothing
