-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module CdbGQL.Enum.Professional_orientation_system_update_column exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| update columns of table "professional\_orientation\_system"

  - CreatedAt - column name
  - Id - column name
  - OrientationSystemId - column name
  - ProfessionalId - column name

-}
type Professional_orientation_system_update_column
    = CreatedAt
    | Id
    | OrientationSystemId
    | ProfessionalId


list : List Professional_orientation_system_update_column
list =
    [ CreatedAt, Id, OrientationSystemId, ProfessionalId ]


decoder : Decoder Professional_orientation_system_update_column
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "createdAt" ->
                        Decode.succeed CreatedAt

                    "id" ->
                        Decode.succeed Id

                    "orientationSystemId" ->
                        Decode.succeed OrientationSystemId

                    "professionalId" ->
                        Decode.succeed ProfessionalId

                    _ ->
                        Decode.fail ("Invalid Professional_orientation_system_update_column type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Professional_orientation_system_update_column -> String
toString enum____ =
    case enum____ of
        CreatedAt ->
            "createdAt"

        Id ->
            "id"

        OrientationSystemId ->
            "orientationSystemId"

        ProfessionalId ->
            "professionalId"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Professional_orientation_system_update_column
fromString enumString____ =
    case enumString____ of
        "createdAt" ->
            Just CreatedAt

        "id" ->
            Just Id

        "orientationSystemId" ->
            Just OrientationSystemId

        "professionalId" ->
            Just ProfessionalId

        _ ->
            Nothing
