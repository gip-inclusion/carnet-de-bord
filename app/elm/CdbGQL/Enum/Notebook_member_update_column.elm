-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module CdbGQL.Enum.Notebook_member_update_column exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| update columns of table "notebook\_member"

  - AccountId - column name
  - Active - column name
  - CreatedAt - column name
  - CreatorId - column name
  - Id - column name
  - InvitationSendAt - column name
  - LastModifiedAt - column name
  - LastVisitedAt - column name
  - MemberType - column name
  - MembershipEndedAt - column name
  - NotebookId - column name

-}
type Notebook_member_update_column
    = AccountId
    | Active
    | CreatedAt
    | CreatorId
    | Id
    | InvitationSendAt
    | LastModifiedAt
    | LastVisitedAt
    | MemberType
    | MembershipEndedAt
    | NotebookId


list : List Notebook_member_update_column
list =
    [ AccountId, Active, CreatedAt, CreatorId, Id, InvitationSendAt, LastModifiedAt, LastVisitedAt, MemberType, MembershipEndedAt, NotebookId ]


decoder : Decoder Notebook_member_update_column
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "accountId" ->
                        Decode.succeed AccountId

                    "active" ->
                        Decode.succeed Active

                    "createdAt" ->
                        Decode.succeed CreatedAt

                    "creatorId" ->
                        Decode.succeed CreatorId

                    "id" ->
                        Decode.succeed Id

                    "invitationSendAt" ->
                        Decode.succeed InvitationSendAt

                    "lastModifiedAt" ->
                        Decode.succeed LastModifiedAt

                    "lastVisitedAt" ->
                        Decode.succeed LastVisitedAt

                    "memberType" ->
                        Decode.succeed MemberType

                    "membershipEndedAt" ->
                        Decode.succeed MembershipEndedAt

                    "notebookId" ->
                        Decode.succeed NotebookId

                    _ ->
                        Decode.fail ("Invalid Notebook_member_update_column type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Notebook_member_update_column -> String
toString enum____ =
    case enum____ of
        AccountId ->
            "accountId"

        Active ->
            "active"

        CreatedAt ->
            "createdAt"

        CreatorId ->
            "creatorId"

        Id ->
            "id"

        InvitationSendAt ->
            "invitationSendAt"

        LastModifiedAt ->
            "lastModifiedAt"

        LastVisitedAt ->
            "lastVisitedAt"

        MemberType ->
            "memberType"

        MembershipEndedAt ->
            "membershipEndedAt"

        NotebookId ->
            "notebookId"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Notebook_member_update_column
fromString enumString____ =
    case enumString____ of
        "accountId" ->
            Just AccountId

        "active" ->
            Just Active

        "createdAt" ->
            Just CreatedAt

        "creatorId" ->
            Just CreatorId

        "id" ->
            Just Id

        "invitationSendAt" ->
            Just InvitationSendAt

        "lastModifiedAt" ->
            Just LastModifiedAt

        "lastVisitedAt" ->
            Just LastVisitedAt

        "memberType" ->
            Just MemberType

        "membershipEndedAt" ->
            Just MembershipEndedAt

        "notebookId" ->
            Just NotebookId

        _ ->
            Nothing
