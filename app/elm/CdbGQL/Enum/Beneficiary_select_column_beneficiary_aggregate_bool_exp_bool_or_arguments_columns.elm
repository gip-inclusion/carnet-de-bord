-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module CdbGQL.Enum.Beneficiary_select_column_beneficiary_aggregate_bool_exp_bool_or_arguments_columns exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| select "beneficiary\_aggregate\_bool\_exp\_bool\_or\_arguments\_columns" columns of table "beneficiary"

  - IsHomeless - column name
  - RightAre - column name
  - RightAss - column name
  - RightBonus - column name
  - SubjectToRightAndDuty - column name

-}
type Beneficiary_select_column_beneficiary_aggregate_bool_exp_bool_or_arguments_columns
    = IsHomeless
    | RightAre
    | RightAss
    | RightBonus
    | SubjectToRightAndDuty


list : List Beneficiary_select_column_beneficiary_aggregate_bool_exp_bool_or_arguments_columns
list =
    [ IsHomeless, RightAre, RightAss, RightBonus, SubjectToRightAndDuty ]


decoder : Decoder Beneficiary_select_column_beneficiary_aggregate_bool_exp_bool_or_arguments_columns
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "isHomeless" ->
                        Decode.succeed IsHomeless

                    "rightAre" ->
                        Decode.succeed RightAre

                    "rightAss" ->
                        Decode.succeed RightAss

                    "rightBonus" ->
                        Decode.succeed RightBonus

                    "subjectToRightAndDuty" ->
                        Decode.succeed SubjectToRightAndDuty

                    _ ->
                        Decode.fail ("Invalid Beneficiary_select_column_beneficiary_aggregate_bool_exp_bool_or_arguments_columns type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Beneficiary_select_column_beneficiary_aggregate_bool_exp_bool_or_arguments_columns -> String
toString enum____ =
    case enum____ of
        IsHomeless ->
            "isHomeless"

        RightAre ->
            "rightAre"

        RightAss ->
            "rightAss"

        RightBonus ->
            "rightBonus"

        SubjectToRightAndDuty ->
            "subjectToRightAndDuty"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Beneficiary_select_column_beneficiary_aggregate_bool_exp_bool_or_arguments_columns
fromString enumString____ =
    case enumString____ of
        "isHomeless" ->
            Just IsHomeless

        "rightAre" ->
            Just RightAre

        "rightAss" ->
            Just RightAss

        "rightBonus" ->
            Just RightBonus

        "subjectToRightAndDuty" ->
            Just SubjectToRightAndDuty

        _ ->
            Nothing
