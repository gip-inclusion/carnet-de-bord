type Mutation {
  create_notebook(
    notebook: CreateNotebookInput!
  ): CreateNotebookOutput
}

type Mutation {
  create_nps_rating(
    score: Int!
  ): NPSRatingOutput
}

type Query {
  diagnostic_pole_emploi(
    notebookId: uuid!
  ): PoleEmploiDossierIndividu
}

type Mutation {
  update_notebook_from_pole_emploi(
    notebookId: uuid!
  ): UpdateNotebookFromPoleEmploiOutput
}

type Mutation {
  update_socio_pro(
    id: uuid!
    workSituation: String
    workSituationDate: date
    workSituationEndDate: date
    rightRqth: Boolean
    educationLevel: String
    lastJobEndedAt: date
    situationIdsToDelete: [uuid!]!
    professionalProjectsToAdd: [UpdateSocioProProfessionalProjectInsertInput!]!
    professionalProjectIdsToDelete: [uuid!]!
    professionalProjectsToUpdate: [UpdateSocioProProfessionalProjectSetInput!]!
    situationsToAdd: [UpdateSocioProNotebookSituationInsertInput!]!
  ): UpdateSocioProOutput
}

enum UpdateSocioProContractTypeEnum {
  """ Apprentissage """ apprentissage
  """ CDD """ cdd
  """ CDI """ cdi
  """ Contrat de professionnalisation """ contrat_professionnalisation
  """ Interim """ interim
  """ Lib√©ral """ liberal
  """ Portage salarial """ portage_salarial
  """ Saisonnier """ saisonnier
}

enum UpdateSocioProEmploymentTypeEnum {
  """ Temps plein """ full_time
  """ Temps partiel """ part_time
}

enum PoleEmploiBesoinValeurEnum {
  POINT_FORT
  BESOIN
  NON_EXPLORE
}

enum PoleEmploiContrainteValeurEnum {
  NON_ABORDEE
  OUI
  CLOTUREE
}

enum PoleEmploiSituationValeurEnum {
  NON_ABORDEE
  OUI
  NON
}

enum PoleEmploiObjectifValeurEnum {
  NON_ABORDE
  EN_COURS
  REALISE
  ABANDONNE
}

input UpdateSocioProProfessionalProjectInsertInput {
  contractTypeId: UpdateSocioProContractTypeEnum
  employmentTypeId: UpdateSocioProEmploymentTypeEnum
  hourlyRate: Int
  mobilityRadius: Int
  notebookId: uuid
  romeCodeId: uuid
}

input UpdateSocioProProfessionalProjectSetInput {
  contractTypeId: UpdateSocioProContractTypeEnum
  employmentTypeId: UpdateSocioProEmploymentTypeEnum
  hourlyRate: Int
  id: uuid!
  mobilityRadius: Int
  notebookId: uuid
  romeCodeId: uuid
}

input UpdateSocioProNotebookSituationInsertInput {
  notebookId: uuid!
  situationId: uuid!
}

input CreateNotebookInput {
  nir: String!
  externalId: String
  firstname: String!
  lastname: String!
  dateOfBirth: date!
  mobileNumber: String
  email: String
  address1: String
  address2: String
  postalCode: String
  city: String
  cafNumber: String
}

type NPSRatingOutput {
  void: String
}

type UpdateSocioProOutput {
  id: uuid!
}

type CreateNotebookOutput {
  notebookId: uuid!
}

type UpdateNotebookFromPoleEmploiOutput {
  data_has_been_updated: Boolean!
  has_pe_diagnostic: Boolean!
  external_data_has_been_updated: Boolean!
}

type PoleEmploiDossierIndividu {
  besoinsParDiagnosticIndividuDtos: [PoleEmploiDossierIndividuBesoinsParDiagnosticIndividu!]!
  contraintesIndividusDto: PoleEmploiDossierIndividuContraintesIndividus!
}

type PoleEmploiDossierIndividuBesoinsParDiagnosticIndividu {
  besoins: [PoleEmploiDossierIndividuBesoins!]!
  dateMiseAJour: String
  estPrioritaire: Boolean!
  idMetierChiffre: String!
  nomMetier: String
  statut: String!
  typologie: String
}

type PoleEmploiDossierIndividuBesoins {
  code: String!
  libelle: String!
  valeur: PoleEmploiBesoinValeurEnum!
}

type PoleEmploiDossierIndividuContraintesIndividus {
  code: String!
  conseiller: String
  contraintes: [PoleEmploiDossierIndividuContraintes!]!
  dateDeModification: String
  libelle: String!
}

type PoleEmploiDossierIndividuContraintes {
  date: String
  code: String!
  libelle: String!
  objectifs: [PoleEmploiDossierIndividuObjectifs!]!
  situations: [PoleEmploiDossierIndividuSituations!]!
  valeur: PoleEmploiContrainteValeurEnum!
}

type PoleEmploiDossierIndividuObjectifs {
  code: String!
  libelle: String!
  valeur: PoleEmploiObjectifValeurEnum!
}

type PoleEmploiDossierIndividuSituations {
  code: String!
  libelle: String!
  valeur: PoleEmploiSituationValeurEnum!
}
